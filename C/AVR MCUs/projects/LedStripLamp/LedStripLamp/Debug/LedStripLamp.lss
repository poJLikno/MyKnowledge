
LedStripLamp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800090  00800090  00000e5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018d8  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000947  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9e  00000000  00000000  0000319f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00003f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e2  00000000  00000000  000045f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000059da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	f0 c3       	rjmp	.+2016   	; 0x7f6 <__vector_10>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	05 a8       	ldd	r0, Z+53	; 0x35
  20:	4c cd       	rjmp	.-1384   	; 0xfffffaba <__eeprom_end+0xff7efaba>
  22:	b2 d4       	rcall	.+2404   	; 0x988 <__fixunssfsi+0x44>
  24:	4e b9       	out	0x0e, r20	; 14
  26:	38 36       	cpi	r19, 0x68	; 104
  28:	a9 02       	muls	r26, r25
  2a:	0c 50       	subi	r16, 0x0C	; 12
  2c:	b9 91       	ld	r27, Y+
  2e:	86 88       	ldd	r8, Z+22	; 0x16
  30:	08 3c       	cpi	r16, 0xC8	; 200
  32:	a6 aa       	std	Z+54, r10	; 0x36
  34:	aa 2a       	or	r10, r26
  36:	be 00       	.word	0x00be	; ????
  38:	00 00       	nop
  3a:	80 3f       	cpi	r24, 0xF0	; 240

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	e8 e9       	ldi	r30, 0x98	; 152
  50:	fd e0       	ldi	r31, 0x0D	; 13
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a0 39       	cpi	r26, 0x90	; 144
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	a0 e9       	ldi	r26, 0x90	; 144
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	ab 39       	cpi	r26, 0x9B	; 155
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	31 d3       	rcall	.+1634   	; 0x6d2 <main>
  70:	91 c6       	rjmp	.+3362   	; 0xd94 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <setLedStripColor>:
#include <avr/io.h>
#include <util/delay.h>

void setLedStripColor(RGB color, uint8_t led_count)
{
	uint8_t ports = PORTB;
  74:	a8 b3       	in	r26, 0x18	; 24
	RGB save_color = { 0 };
	
	uint8_t l = 0, i = 0;
	for (l = 0; l < led_count; l++)
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	5b c0       	rjmp	.+182    	; 0x130 <setLedStripColor+0xbc>
	{
		save_color = color;
  7a:	36 2f       	mov	r19, r22
  7c:	57 2f       	mov	r21, r23
  7e:	28 2f       	mov	r18, r24
		// Green byte
		for (i = 128; i > 0; i /=2)
  80:	90 e8       	ldi	r25, 0x80	; 128
  82:	19 c0       	rjmp	.+50     	; 0xb6 <setLedStripColor+0x42>
		{
			if (save_color.g >= i)
  84:	59 17       	cp	r21, r25
  86:	60 f0       	brcs	.+24     	; 0xa0 <setLedStripColor+0x2c>
			{
				PORTB = 2;
  88:	e2 e0       	ldi	r30, 0x02	; 2
  8a:	e8 bb       	out	0x18, r30	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e4 e0       	ldi	r30, 0x04	; 4
  8e:	ea 95       	dec	r30
  90:	f1 f7       	brne	.-4      	; 0x8e <setLedStripColor+0x1a>
				_delay_us(0.7375);
				PORTB = 0;
  92:	18 ba       	out	0x18, r1	; 24
  94:	e2 e0       	ldi	r30, 0x02	; 2
  96:	ea 95       	dec	r30
  98:	f1 f7       	brne	.-4      	; 0x96 <setLedStripColor+0x22>
  9a:	00 00       	nop
				_delay_us(0.3875);
				
				save_color.g -= i;
  9c:	59 1b       	sub	r21, r25
  9e:	0a c0       	rjmp	.+20     	; 0xb4 <setLedStripColor+0x40>
			}
			else
			{
				PORTB = 2;
  a0:	e2 e0       	ldi	r30, 0x02	; 2
  a2:	e8 bb       	out	0x18, r30	; 24
  a4:	e2 e0       	ldi	r30, 0x02	; 2
  a6:	ea 95       	dec	r30
  a8:	f1 f7       	brne	.-4      	; 0xa6 <setLedStripColor+0x32>
				_delay_us(0.3375);
				PORTB = 0;
  aa:	18 ba       	out	0x18, r1	; 24
  ac:	e4 e0       	ldi	r30, 0x04	; 4
  ae:	ea 95       	dec	r30
  b0:	f1 f7       	brne	.-4      	; 0xae <setLedStripColor+0x3a>
  b2:	00 00       	nop
	uint8_t l = 0, i = 0;
	for (l = 0; l < led_count; l++)
	{
		save_color = color;
		// Green byte
		for (i = 128; i > 0; i /=2)
  b4:	96 95       	lsr	r25
  b6:	91 11       	cpse	r25, r1
  b8:	e5 cf       	rjmp	.-54     	; 0x84 <setLedStripColor+0x10>
  ba:	90 e8       	ldi	r25, 0x80	; 128
  bc:	19 c0       	rjmp	.+50     	; 0xf0 <setLedStripColor+0x7c>
			}
		}
		// Red byte
		for (i = 128; i > 0; i /=2)
		{
			if (save_color.r >= i)
  be:	39 17       	cp	r19, r25
  c0:	60 f0       	brcs	.+24     	; 0xda <setLedStripColor+0x66>
			{
				PORTB = 2;
  c2:	52 e0       	ldi	r21, 0x02	; 2
  c4:	58 bb       	out	0x18, r21	; 24
  c6:	54 e0       	ldi	r21, 0x04	; 4
  c8:	5a 95       	dec	r21
  ca:	f1 f7       	brne	.-4      	; 0xc8 <setLedStripColor+0x54>
				_delay_us(0.7375);
				PORTB = 0;
  cc:	18 ba       	out	0x18, r1	; 24
  ce:	e2 e0       	ldi	r30, 0x02	; 2
  d0:	ea 95       	dec	r30
  d2:	f1 f7       	brne	.-4      	; 0xd0 <setLedStripColor+0x5c>
  d4:	00 00       	nop
				_delay_us(0.3875);
				
				save_color.r -= i;
  d6:	39 1b       	sub	r19, r25
  d8:	0a c0       	rjmp	.+20     	; 0xee <setLedStripColor+0x7a>
			}
			else
			{
				PORTB = 2;
  da:	52 e0       	ldi	r21, 0x02	; 2
  dc:	58 bb       	out	0x18, r21	; 24
  de:	52 e0       	ldi	r21, 0x02	; 2
  e0:	5a 95       	dec	r21
  e2:	f1 f7       	brne	.-4      	; 0xe0 <setLedStripColor+0x6c>
				_delay_us(0.3375);
				PORTB = 0;
  e4:	18 ba       	out	0x18, r1	; 24
  e6:	e4 e0       	ldi	r30, 0x04	; 4
  e8:	ea 95       	dec	r30
  ea:	f1 f7       	brne	.-4      	; 0xe8 <setLedStripColor+0x74>
  ec:	00 00       	nop
				PORTB = 0;
				_delay_us(0.7875);
			}
		}
		// Red byte
		for (i = 128; i > 0; i /=2)
  ee:	96 95       	lsr	r25
  f0:	91 11       	cpse	r25, r1
  f2:	e5 cf       	rjmp	.-54     	; 0xbe <setLedStripColor+0x4a>
  f4:	90 e8       	ldi	r25, 0x80	; 128
  f6:	19 c0       	rjmp	.+50     	; 0x12a <setLedStripColor+0xb6>
			}
		}
		// Blue byte
		for (i = 128; i > 0; i /=2)
		{
			if (save_color.b >= i)
  f8:	29 17       	cp	r18, r25
  fa:	60 f0       	brcs	.+24     	; 0x114 <setLedStripColor+0xa0>
			{
				PORTB = 2;
  fc:	32 e0       	ldi	r19, 0x02	; 2
  fe:	38 bb       	out	0x18, r19	; 24
 100:	34 e0       	ldi	r19, 0x04	; 4
 102:	3a 95       	dec	r19
 104:	f1 f7       	brne	.-4      	; 0x102 <setLedStripColor+0x8e>
				_delay_us(0.7375);
				PORTB = 0;
 106:	18 ba       	out	0x18, r1	; 24
 108:	52 e0       	ldi	r21, 0x02	; 2
 10a:	5a 95       	dec	r21
 10c:	f1 f7       	brne	.-4      	; 0x10a <setLedStripColor+0x96>
 10e:	00 00       	nop
				_delay_us(0.3875);
				
				save_color.b -= i;
 110:	29 1b       	sub	r18, r25
 112:	0a c0       	rjmp	.+20     	; 0x128 <setLedStripColor+0xb4>
			}
			else
			{
				PORTB = 2;
 114:	32 e0       	ldi	r19, 0x02	; 2
 116:	38 bb       	out	0x18, r19	; 24
 118:	e2 e0       	ldi	r30, 0x02	; 2
 11a:	ea 95       	dec	r30
 11c:	f1 f7       	brne	.-4      	; 0x11a <setLedStripColor+0xa6>
				_delay_us(0.3375);
				PORTB = 0;
 11e:	18 ba       	out	0x18, r1	; 24
 120:	34 e0       	ldi	r19, 0x04	; 4
 122:	3a 95       	dec	r19
 124:	f1 f7       	brne	.-4      	; 0x122 <setLedStripColor+0xae>
 126:	00 00       	nop
				PORTB = 0;
				_delay_us(0.7875);
			}
		}
		// Blue byte
		for (i = 128; i > 0; i /=2)
 128:	96 95       	lsr	r25
 12a:	91 11       	cpse	r25, r1
 12c:	e5 cf       	rjmp	.-54     	; 0xf8 <setLedStripColor+0x84>
{
	uint8_t ports = PORTB;
	RGB save_color = { 0 };
	
	uint8_t l = 0, i = 0;
	for (l = 0; l < led_count; l++)
 12e:	ff 5f       	subi	r31, 0xFF	; 255
 130:	f4 17       	cp	r31, r20
 132:	08 f4       	brcc	.+2      	; 0x136 <setLedStripColor+0xc2>
 134:	a2 cf       	rjmp	.-188    	; 0x7a <setLedStripColor+0x6>
				PORTB = 0;
				_delay_us(0.7875);
			}
		}
	}
	PORTB = ports;
 136:	a8 bb       	out	0x18, r26	; 24
 138:	08 95       	ret

0000013a <ledStripOFF>:
}

void ledStripOFF(uint8_t led_count)
{
	uint8_t ports = PORTB;
 13a:	e8 b3       	in	r30, 0x18	; 24
	
	uint16_t i = 0;
	for (i = 0; i < led_count * 24; i++)
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0c c0       	rjmp	.+24     	; 0x15a <ledStripOFF+0x20>
	{
		PORTB = 2;
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	98 bb       	out	0x18, r25	; 24
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <ledStripOFF+0xe>
		_delay_us(0.3375);
		PORTB = 0;
 14c:	18 ba       	out	0x18, r1	; 24
 14e:	94 e0       	ldi	r25, 0x04	; 4
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <ledStripOFF+0x16>
 154:	00 00       	nop
void ledStripOFF(uint8_t led_count)
{
	uint8_t ports = PORTB;
	
	uint16_t i = 0;
	for (i = 0; i < led_count * 24; i++)
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	26 0f       	add	r18, r22
 166:	37 1f       	adc	r19, r23
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	42 17       	cp	r20, r18
 176:	53 07       	cpc	r21, r19
 178:	20 f3       	brcs	.-56     	; 0x142 <ledStripOFF+0x8>
		PORTB = 2;
		_delay_us(0.3375);
		PORTB = 0;
		_delay_us(0.7875);
	}
	PORTB = ports;
 17a:	e8 bb       	out	0x18, r30	; 24
 17c:	08 95       	ret

0000017e <setLedStripColorsArray>:
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

void setLedStripColorsArray(RGB *colors_array, uint8_t *counts_array, uint8_t elements_count, uint8_t leds_per_tick, uint8_t led_count)
{
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	6c 01       	movw	r12, r24
 190:	eb 01       	movw	r28, r22
	uint8_t ports = PORTB;
 192:	e8 b2       	in	r14, 0x18	; 24
	
	RGB save_color = { 0 };
	uint8_t l = 0, j = 0, k = 0, i = 0;
	for (l = 0; l < led_count; l += leds_per_tick)
 194:	f1 2c       	mov	r15, r1
 196:	74 c0       	rjmp	.+232    	; 0x280 <__stack+0x21>
	{
		for (j = 0; j < elements_count; j++)
		{
			for (k = 0; k < counts_array[j]; k++)
			{
				save_color = colors_array[j];
 198:	cf 01       	movw	r24, r30
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	e8 0f       	add	r30, r24
 1a0:	f9 1f       	adc	r31, r25
 1a2:	ec 0d       	add	r30, r12
 1a4:	fd 1d       	adc	r31, r13
 1a6:	50 81       	ld	r21, Z
 1a8:	71 81       	ldd	r23, Z+1	; 0x01
 1aa:	32 81       	ldd	r19, Z+2	; 0x02
				// Green byte
				for (i = 128; i > 0; i /=2)
 1ac:	90 e8       	ldi	r25, 0x80	; 128
 1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <setLedStripColorsArray+0x64>
				{
					if (save_color.g >= i)
 1b0:	79 17       	cp	r23, r25
 1b2:	60 f0       	brcs	.+24     	; 0x1cc <setLedStripColorsArray+0x4e>
					{
						PORTB = 2;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <setLedStripColorsArray+0x3c>
						_delay_us(0.7375);
						PORTB = 0;
 1be:	18 ba       	out	0x18, r1	; 24
 1c0:	a2 e0       	ldi	r26, 0x02	; 2
 1c2:	aa 95       	dec	r26
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <setLedStripColorsArray+0x44>
 1c6:	00 00       	nop
						_delay_us(0.3875);
						
						save_color.g -= i;
 1c8:	79 1b       	sub	r23, r25
 1ca:	0a c0       	rjmp	.+20     	; 0x1e0 <setLedStripColorsArray+0x62>
					}
					else
					{
						PORTB = 2;
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	b2 e0       	ldi	r27, 0x02	; 2
 1d2:	ba 95       	dec	r27
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <setLedStripColorsArray+0x54>
						_delay_us(0.3375);
						PORTB = 0;
 1d6:	18 ba       	out	0x18, r1	; 24
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <setLedStripColorsArray+0x5c>
 1de:	00 00       	nop
		{
			for (k = 0; k < counts_array[j]; k++)
			{
				save_color = colors_array[j];
				// Green byte
				for (i = 128; i > 0; i /=2)
 1e0:	96 95       	lsr	r25
 1e2:	91 11       	cpse	r25, r1
 1e4:	e5 cf       	rjmp	.-54     	; 0x1b0 <setLedStripColorsArray+0x32>
 1e6:	90 e8       	ldi	r25, 0x80	; 128
 1e8:	19 c0       	rjmp	.+50     	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
					}
				}
				// Red byte
				for (i = 128; i > 0; i /=2)
				{
					if (save_color.r >= i)
 1ea:	59 17       	cp	r21, r25
 1ec:	60 f0       	brcs	.+24     	; 0x206 <__DATA_REGION_LENGTH__+0x6>
					{
						PORTB = 2;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	a4 e0       	ldi	r26, 0x04	; 4
 1f4:	aa 95       	dec	r26
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <setLedStripColorsArray+0x76>
						_delay_us(0.7375);
						PORTB = 0;
 1f8:	18 ba       	out	0x18, r1	; 24
 1fa:	b2 e0       	ldi	r27, 0x02	; 2
 1fc:	ba 95       	dec	r27
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <setLedStripColorsArray+0x7e>
 200:	00 00       	nop
						_delay_us(0.3875);
						
						save_color.r -= i;
 202:	59 1b       	sub	r21, r25
 204:	0a c0       	rjmp	.+20     	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
					}
					else
					{
						PORTB = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	88 bb       	out	0x18, r24	; 24
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <__DATA_REGION_LENGTH__+0xc>
						_delay_us(0.3375);
						PORTB = 0;
 210:	18 ba       	out	0x18, r1	; 24
 212:	a4 e0       	ldi	r26, 0x04	; 4
 214:	aa 95       	dec	r26
 216:	f1 f7       	brne	.-4      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
 218:	00 00       	nop
						PORTB = 0;
						_delay_us(0.7875);
					}
				}
				// Red byte
				for (i = 128; i > 0; i /=2)
 21a:	96 95       	lsr	r25
 21c:	91 11       	cpse	r25, r1
 21e:	e5 cf       	rjmp	.-54     	; 0x1ea <setLedStripColorsArray+0x6c>
 220:	90 e8       	ldi	r25, 0x80	; 128
 222:	19 c0       	rjmp	.+50     	; 0x256 <__DATA_REGION_LENGTH__+0x56>
					}
				}
				// Blue byte
				for (i = 128; i > 0; i /=2)
				{
					if (save_color.b >= i)
 224:	39 17       	cp	r19, r25
 226:	60 f0       	brcs	.+24     	; 0x240 <__DATA_REGION_LENGTH__+0x40>
					{
						PORTB = 2;
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	b4 e0       	ldi	r27, 0x04	; 4
 22e:	ba 95       	dec	r27
 230:	f1 f7       	brne	.-4      	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
						_delay_us(0.7375);
						PORTB = 0;
 232:	18 ba       	out	0x18, r1	; 24
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <__DATA_REGION_LENGTH__+0x36>
 23a:	00 00       	nop
						_delay_us(0.3875);
						
						save_color.b -= i;
 23c:	39 1b       	sub	r19, r25
 23e:	0a c0       	rjmp	.+20     	; 0x254 <__DATA_REGION_LENGTH__+0x54>
					}
					else
					{
						PORTB = 2;
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	88 bb       	out	0x18, r24	; 24
 244:	a2 e0       	ldi	r26, 0x02	; 2
 246:	aa 95       	dec	r26
 248:	f1 f7       	brne	.-4      	; 0x246 <__DATA_REGION_LENGTH__+0x46>
						_delay_us(0.3375);
						PORTB = 0;
 24a:	18 ba       	out	0x18, r1	; 24
 24c:	b4 e0       	ldi	r27, 0x04	; 4
 24e:	ba 95       	dec	r27
 250:	f1 f7       	brne	.-4      	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
 252:	00 00       	nop
						PORTB = 0;
						_delay_us(0.7875);
					}
				}
				// Blue byte
				for (i = 128; i > 0; i /=2)
 254:	96 95       	lsr	r25
 256:	91 11       	cpse	r25, r1
 258:	e5 cf       	rjmp	.-54     	; 0x224 <__DATA_REGION_LENGTH__+0x24>
	uint8_t l = 0, j = 0, k = 0, i = 0;
	for (l = 0; l < led_count; l += leds_per_tick)
	{
		for (j = 0; j < elements_count; j++)
		{
			for (k = 0; k < counts_array[j]; k++)
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	01 c0       	rjmp	.+2      	; 0x260 <__stack+0x1>
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	e1 2f       	mov	r30, r17
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ce 01       	movw	r24, r28
 266:	8e 0f       	add	r24, r30
 268:	9f 1f       	adc	r25, r31
 26a:	dc 01       	movw	r26, r24
 26c:	8c 91       	ld	r24, X
 26e:	68 17       	cp	r22, r24
 270:	08 f4       	brcc	.+2      	; 0x274 <__stack+0x15>
 272:	92 cf       	rjmp	.-220    	; 0x198 <setLedStripColorsArray+0x1a>
	
	RGB save_color = { 0 };
	uint8_t l = 0, j = 0, k = 0, i = 0;
	for (l = 0; l < led_count; l += leds_per_tick)
	{
		for (j = 0; j < elements_count; j++)
 274:	1f 5f       	subi	r17, 0xFF	; 255
 276:	01 c0       	rjmp	.+2      	; 0x27a <__stack+0x1b>
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	14 17       	cp	r17, r20
 27c:	80 f3       	brcs	.-32     	; 0x25e <__DATA_REGION_LENGTH__+0x5e>
{
	uint8_t ports = PORTB;
	
	RGB save_color = { 0 };
	uint8_t l = 0, j = 0, k = 0, i = 0;
	for (l = 0; l < led_count; l += leds_per_tick)
 27e:	f2 0e       	add	r15, r18
 280:	f0 16       	cp	r15, r16
 282:	d0 f3       	brcs	.-12     	; 0x278 <__stack+0x19>
				}
			}
		}
	}
	
	PORTB = ports;
 284:	e8 ba       	out	0x18, r14	; 24
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	df 90       	pop	r13
 294:	cf 90       	pop	r12
 296:	08 95       	ret

00000298 <setLedStripArray>:

void setLedStripArray(RGB *colors_array, uint16_t size, uint8_t led_count)
{
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
 2a4:	fb 01       	movw	r30, r22
	uint8_t ports = PORTB;
 2a6:	f8 b2       	in	r15, 0x18	; 24
	
	RGB save_color = { 0 };	
	uint8_t l = 0, j = 0, i = 0;
	for (l = 0; l < led_count; l += size / sizeof(RGB))
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	73 c0       	rjmp	.+230    	; 0x392 <setLedStripArray+0xfa>
	{
		for (j = 0; j < size / sizeof(RGB); j++)
		{
			save_color = colors_array[j];
 2ac:	d9 01       	movw	r26, r18
 2ae:	aa 0f       	add	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	2a 0f       	add	r18, r26
 2b4:	3b 1f       	adc	r19, r27
 2b6:	de 01       	movw	r26, r28
 2b8:	a2 0f       	add	r26, r18
 2ba:	b3 1f       	adc	r27, r19
 2bc:	2c 91       	ld	r18, X
 2be:	11 96       	adiw	r26, 0x01	; 1
 2c0:	3c 91       	ld	r19, X
 2c2:	11 97       	sbiw	r26, 0x01	; 1
 2c4:	12 96       	adiw	r26, 0x02	; 2
 2c6:	9c 91       	ld	r25, X
			// Green byte
			for (i = 128; i > 0; i /=2)
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <setLedStripArray+0x66>
			{
				if (save_color.g >= i)
 2cc:	38 17       	cp	r19, r24
 2ce:	60 f0       	brcs	.+24     	; 0x2e8 <setLedStripArray+0x50>
				{
					PORTB = 2;
 2d0:	52 e0       	ldi	r21, 0x02	; 2
 2d2:	58 bb       	out	0x18, r21	; 24
 2d4:	54 e0       	ldi	r21, 0x04	; 4
 2d6:	5a 95       	dec	r21
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <setLedStripArray+0x3e>
					_delay_us(0.7375);
					PORTB = 0;
 2da:	18 ba       	out	0x18, r1	; 24
 2dc:	52 e0       	ldi	r21, 0x02	; 2
 2de:	5a 95       	dec	r21
 2e0:	f1 f7       	brne	.-4      	; 0x2de <setLedStripArray+0x46>
 2e2:	00 00       	nop
					_delay_us(0.3875);
					
					save_color.g -= i;
 2e4:	38 1b       	sub	r19, r24
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <setLedStripArray+0x64>
				}
				else
				{
					PORTB = 2;
 2e8:	52 e0       	ldi	r21, 0x02	; 2
 2ea:	58 bb       	out	0x18, r21	; 24
 2ec:	52 e0       	ldi	r21, 0x02	; 2
 2ee:	5a 95       	dec	r21
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <setLedStripArray+0x56>
					_delay_us(0.3375);
					PORTB = 0;
 2f2:	18 ba       	out	0x18, r1	; 24
 2f4:	54 e0       	ldi	r21, 0x04	; 4
 2f6:	5a 95       	dec	r21
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <setLedStripArray+0x5e>
 2fa:	00 00       	nop
	{
		for (j = 0; j < size / sizeof(RGB); j++)
		{
			save_color = colors_array[j];
			// Green byte
			for (i = 128; i > 0; i /=2)
 2fc:	86 95       	lsr	r24
 2fe:	81 11       	cpse	r24, r1
 300:	e5 cf       	rjmp	.-54     	; 0x2cc <setLedStripArray+0x34>
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	19 c0       	rjmp	.+50     	; 0x338 <setLedStripArray+0xa0>
				}
			}
			// Red byte
			for (i = 128; i > 0; i /=2)
			{
				if (save_color.r >= i)
 306:	28 17       	cp	r18, r24
 308:	60 f0       	brcs	.+24     	; 0x322 <setLedStripArray+0x8a>
				{
					PORTB = 2;
 30a:	32 e0       	ldi	r19, 0x02	; 2
 30c:	38 bb       	out	0x18, r19	; 24
 30e:	34 e0       	ldi	r19, 0x04	; 4
 310:	3a 95       	dec	r19
 312:	f1 f7       	brne	.-4      	; 0x310 <setLedStripArray+0x78>
					_delay_us(0.7375);
					PORTB = 0;
 314:	18 ba       	out	0x18, r1	; 24
 316:	52 e0       	ldi	r21, 0x02	; 2
 318:	5a 95       	dec	r21
 31a:	f1 f7       	brne	.-4      	; 0x318 <setLedStripArray+0x80>
 31c:	00 00       	nop
					_delay_us(0.3875);
					
					save_color.r -= i;
 31e:	28 1b       	sub	r18, r24
 320:	0a c0       	rjmp	.+20     	; 0x336 <setLedStripArray+0x9e>
				}
				else
				{
					PORTB = 2;
 322:	32 e0       	ldi	r19, 0x02	; 2
 324:	38 bb       	out	0x18, r19	; 24
 326:	32 e0       	ldi	r19, 0x02	; 2
 328:	3a 95       	dec	r19
 32a:	f1 f7       	brne	.-4      	; 0x328 <setLedStripArray+0x90>
					_delay_us(0.3375);
					PORTB = 0;
 32c:	18 ba       	out	0x18, r1	; 24
 32e:	54 e0       	ldi	r21, 0x04	; 4
 330:	5a 95       	dec	r21
 332:	f1 f7       	brne	.-4      	; 0x330 <setLedStripArray+0x98>
 334:	00 00       	nop
					PORTB = 0;
					_delay_us(0.7875);
				}
			}
			// Red byte
			for (i = 128; i > 0; i /=2)
 336:	86 95       	lsr	r24
 338:	81 11       	cpse	r24, r1
 33a:	e5 cf       	rjmp	.-54     	; 0x306 <setLedStripArray+0x6e>
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	19 c0       	rjmp	.+50     	; 0x372 <setLedStripArray+0xda>
				}
			}
			// Blue byte
			for (i = 128; i > 0; i /=2)
			{
				if (save_color.b >= i)
 340:	98 17       	cp	r25, r24
 342:	60 f0       	brcs	.+24     	; 0x35c <setLedStripArray+0xc4>
				{
					PORTB = 2;
 344:	22 e0       	ldi	r18, 0x02	; 2
 346:	28 bb       	out	0x18, r18	; 24
 348:	24 e0       	ldi	r18, 0x04	; 4
 34a:	2a 95       	dec	r18
 34c:	f1 f7       	brne	.-4      	; 0x34a <setLedStripArray+0xb2>
					_delay_us(0.7375);
					PORTB = 0;
 34e:	18 ba       	out	0x18, r1	; 24
 350:	32 e0       	ldi	r19, 0x02	; 2
 352:	3a 95       	dec	r19
 354:	f1 f7       	brne	.-4      	; 0x352 <setLedStripArray+0xba>
 356:	00 00       	nop
					_delay_us(0.3875);
					
					save_color.b -= i;
 358:	98 1b       	sub	r25, r24
 35a:	0a c0       	rjmp	.+20     	; 0x370 <setLedStripArray+0xd8>
				}
				else
				{
					PORTB = 2;
 35c:	22 e0       	ldi	r18, 0x02	; 2
 35e:	28 bb       	out	0x18, r18	; 24
 360:	52 e0       	ldi	r21, 0x02	; 2
 362:	5a 95       	dec	r21
 364:	f1 f7       	brne	.-4      	; 0x362 <setLedStripArray+0xca>
					_delay_us(0.3375);
					PORTB = 0;
 366:	18 ba       	out	0x18, r1	; 24
 368:	24 e0       	ldi	r18, 0x04	; 4
 36a:	2a 95       	dec	r18
 36c:	f1 f7       	brne	.-4      	; 0x36a <setLedStripArray+0xd2>
 36e:	00 00       	nop
					PORTB = 0;
					_delay_us(0.7875);
				}
			}
			// Blue byte
			for (i = 128; i > 0; i /=2)
 370:	86 95       	lsr	r24
 372:	81 11       	cpse	r24, r1
 374:	e5 cf       	rjmp	.-54     	; 0x340 <setLedStripArray+0xa8>
	
	RGB save_color = { 0 };	
	uint8_t l = 0, j = 0, i = 0;
	for (l = 0; l < led_count; l += size / sizeof(RGB))
	{
		for (j = 0; j < size / sizeof(RGB); j++)
 376:	1f 5f       	subi	r17, 0xFF	; 255
 378:	01 c0       	rjmp	.+2      	; 0x37c <setLedStripArray+0xe4>
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	21 2f       	mov	r18, r17
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	cf 01       	movw	r24, r30
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	e6 d4       	rcall	.+2508   	; 0xd54 <__udivmodhi4>
 388:	26 17       	cp	r18, r22
 38a:	37 07       	cpc	r19, r23
 38c:	08 f4       	brcc	.+2      	; 0x390 <setLedStripArray+0xf8>
 38e:	8e cf       	rjmp	.-228    	; 0x2ac <setLedStripArray+0x14>
{
	uint8_t ports = PORTB;
	
	RGB save_color = { 0 };	
	uint8_t l = 0, j = 0, i = 0;
	for (l = 0; l < led_count; l += size / sizeof(RGB))
 390:	06 0f       	add	r16, r22
 392:	04 17       	cp	r16, r20
 394:	90 f3       	brcs	.-28     	; 0x37a <setLedStripArray+0xe2>
				}
			}
		}
	}
	
	PORTB = ports;
 396:	f8 ba       	out	0x18, r15	; 24
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	08 95       	ret

000003a4 <static_color_modes>:
		}
    }
}

void static_color_modes(void)
{
 3a4:	0f 93       	push	r16
	// White
	if (led_strip_mode == 0)
 3a6:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <led_strip_mode>
 3aa:	81 11       	cpse	r24, r1
 3ac:	0b c0       	rjmp	.+22     	; 0x3c4 <static_color_modes+0x20>
	{
		setLedStripColor(white_color, led_count);
 3ae:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <white_color>
 3b2:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <white_color+0x1>
 3b6:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <white_color+0x2>
 3ba:	42 e2       	ldi	r20, 0x22	; 34
 3bc:	bc 01       	movw	r22, r24
 3be:	8a 2f       	mov	r24, r26
 3c0:	59 de       	rcall	.-846    	; 0x74 <setLedStripColor>
 3c2:	25 c0       	rjmp	.+74     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	// Red, Orange, Yellow, Green, Cyan, Blue, Purple
	else if (led_strip_mode < 8)
 3c4:	88 30       	cpi	r24, 0x08	; 8
 3c6:	80 f4       	brcc	.+32     	; 0x3e8 <static_color_modes+0x44>
	{
		setLedStripColor(rainbow_colors[led_strip_mode - 1], led_count);
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	fc 01       	movw	r30, r24
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	8e 0f       	add	r24, r30
 3d4:	9f 1f       	adc	r25, r31
 3d6:	fc 01       	movw	r30, r24
 3d8:	e8 58       	subi	r30, 0x88	; 136
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	60 81       	ld	r22, Z
 3de:	71 81       	ldd	r23, Z+1	; 0x01
 3e0:	82 81       	ldd	r24, Z+2	; 0x02
 3e2:	42 e2       	ldi	r20, 0x22	; 34
 3e4:	47 de       	rcall	.-882    	; 0x74 <setLedStripColor>
 3e6:	13 c0       	rjmp	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	// Rainbow (1 led per color)
	else if (led_strip_mode == 8)
 3e8:	88 30       	cpi	r24, 0x08	; 8
 3ea:	39 f4       	brne	.+14     	; 0x3fa <static_color_modes+0x56>
	{
		setLedStripArray((RGB *)rainbow_colors, sizeof(rainbow_colors), led_count);
 3ec:	42 e2       	ldi	r20, 0x22	; 34
 3ee:	65 e1       	ldi	r22, 0x15	; 21
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	88 e7       	ldi	r24, 0x78	; 120
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	50 df       	rcall	.-352    	; 0x298 <setLedStripArray>
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	// Rainbow (3 leds per color)
	else if (led_strip_mode == 9)
 3fa:	89 30       	cpi	r24, 0x09	; 9
 3fc:	41 f4       	brne	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		setLedStripColorsArray((RGB *)rainbow_colors, (uint8_t *)led_width_mask[0], 8, 21, led_count);
 3fe:	02 e2       	ldi	r16, 0x22	; 34
 400:	25 e1       	ldi	r18, 0x15	; 21
 402:	48 e0       	ldi	r20, 0x08	; 8
 404:	60 e6       	ldi	r22, 0x60	; 96
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	88 e7       	ldi	r24, 0x78	; 120
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	b8 de       	rcall	.-656    	; 0x17e <setLedStripColorsArray>
	}
}
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <halh_dynamic_color_modes>:

void halh_dynamic_color_modes(void)
{
	// Rainbow run (1 led per color)
	if (led_strip_mode == 10)
 412:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <led_strip_mode>
 416:	8a 30       	cpi	r24, 0x0A	; 10
 418:	29 f4       	brne	.+10     	; 0x424 <halh_dynamic_color_modes+0x12>
	{
		array_animation_index = 0;
 41a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_animation_index>
		animation_ticks = 0;
 41e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
 422:	08 95       	ret
	}
	// Rainbow run (3 leds per color)
	else if (led_strip_mode == 11)
 424:	8b 30       	cpi	r24, 0x0B	; 11
 426:	29 f4       	brne	.+10     	; 0x432 <halh_dynamic_color_modes+0x20>
	{
		array_animation_index = 0;
 428:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_animation_index>
		animation_ticks = 0;
 42c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
 430:	08 95       	ret
	}
	// Rainbow breath
	else if (led_strip_mode == 12)
 432:	8c 30       	cpi	r24, 0x0C	; 12
 434:	21 f4       	brne	.+8      	; 0x43e <halh_dynamic_color_modes+0x2c>
	{
		array_animation_index = 0;
 436:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_animation_index>
		animation_ticks = 0;
 43a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
 43e:	08 95       	ret

00000440 <dynamic_color_modes>:
	}
}

void dynamic_color_modes(void)
{
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	e0 97       	sbiw	r28, 0x30	; 48
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
	// Rainbow run (1 led per color)
	if (led_strip_mode == 10)
 464:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <led_strip_mode>
 468:	8a 30       	cpi	r24, 0x0A	; 10
 46a:	09 f0       	breq	.+2      	; 0x46e <dynamic_color_modes+0x2e>
 46c:	4f c0       	rjmp	.+158    	; 0x50c <dynamic_color_modes+0xcc>
	{
		if (array_animation_index >= 7) array_animation_index = 0;
 46e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 472:	87 30       	cpi	r24, 0x07	; 7
 474:	10 f0       	brcs	.+4      	; 0x47a <dynamic_color_modes+0x3a>
 476:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_animation_index>
		RGB save_rainbow_colors[7] = { 0 };
 47a:	de 01       	movw	r26, r28
 47c:	59 96       	adiw	r26, 0x19	; 25
 47e:	85 e1       	ldi	r24, 0x15	; 21
 480:	fd 01       	movw	r30, r26
 482:	11 92       	st	Z+, r1
 484:	8a 95       	dec	r24
 486:	e9 f7       	brne	.-6      	; 0x482 <dynamic_color_modes+0x42>
		memcpy(save_rainbow_colors, rainbow_colors, sizeof(rainbow_colors));
 488:	85 e1       	ldi	r24, 0x15	; 21
 48a:	e8 e7       	ldi	r30, 0x78	; 120
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	01 90       	ld	r0, Z+
 490:	0d 92       	st	X+, r0
 492:	8a 95       	dec	r24
 494:	e1 f7       	brne	.-8      	; 0x48e <dynamic_color_modes+0x4e>
		uint8_t i = 0;
		for (i = 0; i < array_animation_index; i++)
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	20 c0       	rjmp	.+64     	; 0x4da <dynamic_color_modes+0x9a>
		{
			RGB mem[7] = { 0 };
 49a:	9e 01       	movw	r18, r28
 49c:	2f 5f       	subi	r18, 0xFF	; 255
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
 4a0:	95 e1       	ldi	r25, 0x15	; 21
 4a2:	f9 01       	movw	r30, r18
 4a4:	11 92       	st	Z+, r1
 4a6:	9a 95       	dec	r25
 4a8:	e9 f7       	brne	.-6      	; 0x4a4 <dynamic_color_modes+0x64>
			mem[0] = save_rainbow_colors[sizeof(rainbow_colors) / sizeof(RGB) - 1];
 4aa:	cb a4       	ldd	r12, Y+43	; 0x2b
 4ac:	dc a4       	ldd	r13, Y+44	; 0x2c
 4ae:	ed a4       	ldd	r14, Y+45	; 0x2d
 4b0:	c9 82       	std	Y+1, r12	; 0x01
 4b2:	da 82       	std	Y+2, r13	; 0x02
 4b4:	eb 82       	std	Y+3, r14	; 0x03
			memcpy(&mem[1], save_rainbow_colors, sizeof(rainbow_colors) - sizeof(RGB));
 4b6:	92 e1       	ldi	r25, 0x12	; 18
 4b8:	fe 01       	movw	r30, r28
 4ba:	79 96       	adiw	r30, 0x19	; 25
 4bc:	de 01       	movw	r26, r28
 4be:	14 96       	adiw	r26, 0x04	; 4
 4c0:	01 90       	ld	r0, Z+
 4c2:	0d 92       	st	X+, r0
 4c4:	9a 95       	dec	r25
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <dynamic_color_modes+0x80>
			memcpy(save_rainbow_colors, mem, sizeof(rainbow_colors));
 4c8:	95 e1       	ldi	r25, 0x15	; 21
 4ca:	f9 01       	movw	r30, r18
 4cc:	de 01       	movw	r26, r28
 4ce:	59 96       	adiw	r26, 0x19	; 25
 4d0:	01 90       	ld	r0, Z+
 4d2:	0d 92       	st	X+, r0
 4d4:	9a 95       	dec	r25
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <dynamic_color_modes+0x90>
	{
		if (array_animation_index >= 7) array_animation_index = 0;
		RGB save_rainbow_colors[7] = { 0 };
		memcpy(save_rainbow_colors, rainbow_colors, sizeof(rainbow_colors));
		uint8_t i = 0;
		for (i = 0; i < array_animation_index; i++)
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <array_animation_index>
 4de:	89 17       	cp	r24, r25
 4e0:	e0 f2       	brcs	.-72     	; 0x49a <dynamic_color_modes+0x5a>
			RGB mem[7] = { 0 };
			mem[0] = save_rainbow_colors[sizeof(rainbow_colors) / sizeof(RGB) - 1];
			memcpy(&mem[1], save_rainbow_colors, sizeof(rainbow_colors) - sizeof(RGB));
			memcpy(save_rainbow_colors, mem, sizeof(rainbow_colors));
		}
		setLedStripArray((RGB *)save_rainbow_colors, sizeof(rainbow_colors), led_count);
 4e2:	42 e2       	ldi	r20, 0x22	; 34
 4e4:	65 e1       	ldi	r22, 0x15	; 21
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	ce 01       	movw	r24, r28
 4ea:	49 96       	adiw	r24, 0x19	; 25
 4ec:	d5 de       	rcall	.-598    	; 0x298 <setLedStripArray>
		array_animation_index++;
 4ee:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <array_animation_index>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f8:	ff ef       	ldi	r31, 0xFF	; 255
 4fa:	22 e5       	ldi	r18, 0x52	; 82
 4fc:	87 e0       	ldi	r24, 0x07	; 7
 4fe:	f1 50       	subi	r31, 0x01	; 1
 500:	20 40       	sbci	r18, 0x00	; 0
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <dynamic_color_modes+0xbe>
 506:	00 c0       	rjmp	.+0      	; 0x508 <dynamic_color_modes+0xc8>
 508:	00 00       	nop
 50a:	d2 c0       	rjmp	.+420    	; 0x6b0 <dynamic_color_modes+0x270>
		_delay_ms(150);
	}
	
	// Rainbow run (3 leds per color)
	else if (led_strip_mode == 11)// 20 tics
 50c:	8b 30       	cpi	r24, 0x0B	; 11
 50e:	09 f0       	breq	.+2      	; 0x512 <dynamic_color_modes+0xd2>
 510:	65 c0       	rjmp	.+202    	; 0x5dc <dynamic_color_modes+0x19c>
	{
		if (array_animation_index >= 3) array_animation_index = 0;
 512:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 516:	83 30       	cpi	r24, 0x03	; 3
 518:	10 f0       	brcs	.+4      	; 0x51e <dynamic_color_modes+0xde>
 51a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_animation_index>
		if (animation_ticks >= 21) animation_ticks = 0;
 51e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 522:	85 31       	cpi	r24, 0x15	; 21
 524:	10 f0       	brcs	.+4      	; 0x52a <dynamic_color_modes+0xea>
 526:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
		RGB save_rainbow_colors[8] = { 0 };
 52a:	de 01       	movw	r26, r28
 52c:	59 96       	adiw	r26, 0x19	; 25
 52e:	88 e1       	ldi	r24, 0x18	; 24
 530:	fd 01       	movw	r30, r26
 532:	11 92       	st	Z+, r1
 534:	8a 95       	dec	r24
 536:	e9 f7       	brne	.-6      	; 0x532 <dynamic_color_modes+0xf2>
		memcpy(save_rainbow_colors, rainbow_colors, sizeof(rainbow_colors));
 538:	85 e1       	ldi	r24, 0x15	; 21
 53a:	e8 e7       	ldi	r30, 0x78	; 120
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	01 90       	ld	r0, Z+
 540:	0d 92       	st	X+, r0
 542:	8a 95       	dec	r24
 544:	e1 f7       	brne	.-8      	; 0x53e <dynamic_color_modes+0xfe>
		uint8_t i = 0;
		for (i = 0; i < animation_ticks; i += 3)
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	20 c0       	rjmp	.+64     	; 0x58a <dynamic_color_modes+0x14a>
		{
			RGB mem[8] = { 0 };
 54a:	9e 01       	movw	r18, r28
 54c:	2f 5f       	subi	r18, 0xFF	; 255
 54e:	3f 4f       	sbci	r19, 0xFF	; 255
 550:	98 e1       	ldi	r25, 0x18	; 24
 552:	f9 01       	movw	r30, r18
 554:	11 92       	st	Z+, r1
 556:	9a 95       	dec	r25
 558:	e9 f7       	brne	.-6      	; 0x554 <dynamic_color_modes+0x114>
			memcpy(&mem[1], save_rainbow_colors, sizeof(rainbow_colors));
 55a:	95 e1       	ldi	r25, 0x15	; 21
 55c:	fe 01       	movw	r30, r28
 55e:	79 96       	adiw	r30, 0x19	; 25
 560:	de 01       	movw	r26, r28
 562:	14 96       	adiw	r26, 0x04	; 4
 564:	01 90       	ld	r0, Z+
 566:	0d 92       	st	X+, r0
 568:	9a 95       	dec	r25
 56a:	e1 f7       	brne	.-8      	; 0x564 <dynamic_color_modes+0x124>
			mem[0] = mem[7];
 56c:	ce 88       	ldd	r12, Y+22	; 0x16
 56e:	df 88       	ldd	r13, Y+23	; 0x17
 570:	e8 8c       	ldd	r14, Y+24	; 0x18
 572:	c9 82       	std	Y+1, r12	; 0x01
 574:	da 82       	std	Y+2, r13	; 0x02
 576:	eb 82       	std	Y+3, r14	; 0x03
			memcpy(save_rainbow_colors, mem, sizeof(save_rainbow_colors));
 578:	98 e1       	ldi	r25, 0x18	; 24
 57a:	f9 01       	movw	r30, r18
 57c:	de 01       	movw	r26, r28
 57e:	59 96       	adiw	r26, 0x19	; 25
 580:	01 90       	ld	r0, Z+
 582:	0d 92       	st	X+, r0
 584:	9a 95       	dec	r25
 586:	e1 f7       	brne	.-8      	; 0x580 <dynamic_color_modes+0x140>
		if (array_animation_index >= 3) array_animation_index = 0;
		if (animation_ticks >= 21) animation_ticks = 0;
		RGB save_rainbow_colors[8] = { 0 };
		memcpy(save_rainbow_colors, rainbow_colors, sizeof(rainbow_colors));
		uint8_t i = 0;
		for (i = 0; i < animation_ticks; i += 3)
 588:	8d 5f       	subi	r24, 0xFD	; 253
 58a:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <__data_end>
 58e:	89 17       	cp	r24, r25
 590:	e0 f2       	brcs	.-72     	; 0x54a <dynamic_color_modes+0x10a>
			mem[0] = mem[7];
			memcpy(save_rainbow_colors, mem, sizeof(save_rainbow_colors));
		}
		setLedStripColorsArray(
			save_rainbow_colors,
			(uint8_t *)led_width_mask[array_animation_index],
 592:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <array_animation_index>
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	60 5a       	subi	r22, 0xA0	; 160
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
			RGB mem[8] = { 0 };
			memcpy(&mem[1], save_rainbow_colors, sizeof(rainbow_colors));
			mem[0] = mem[7];
			memcpy(save_rainbow_colors, mem, sizeof(save_rainbow_colors));
		}
		setLedStripColorsArray(
 5a8:	02 e2       	ldi	r16, 0x22	; 34
 5aa:	25 e1       	ldi	r18, 0x15	; 21
 5ac:	48 e0       	ldi	r20, 0x08	; 8
 5ae:	ce 01       	movw	r24, r28
 5b0:	49 96       	adiw	r24, 0x19	; 25
 5b2:	e5 dd       	rcall	.-1078   	; 0x17e <setLedStripColorsArray>
			save_rainbow_colors,
			(uint8_t *)led_width_mask[array_animation_index],
			sizeof(save_rainbow_colors) / sizeof(RGB),// Elements count
			3 * sizeof(rainbow_colors) / sizeof(RGB),// Leds per tick
			led_count);
		array_animation_index++;
 5b4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <array_animation_index>
		animation_ticks++;
 5be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
 5c8:	ff ef       	ldi	r31, 0xFF	; 255
 5ca:	22 e5       	ldi	r18, 0x52	; 82
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	f1 50       	subi	r31, 0x01	; 1
 5d0:	20 40       	sbci	r18, 0x00	; 0
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <dynamic_color_modes+0x18e>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <dynamic_color_modes+0x198>
 5d8:	00 00       	nop
 5da:	6a c0       	rjmp	.+212    	; 0x6b0 <dynamic_color_modes+0x270>
		_delay_ms(150);
	}
	
	// Rainbow breath
	else if (led_strip_mode == 12)
 5dc:	8c 30       	cpi	r24, 0x0C	; 12
 5de:	09 f0       	breq	.+2      	; 0x5e2 <dynamic_color_modes+0x1a2>
 5e0:	67 c0       	rjmp	.+206    	; 0x6b0 <dynamic_color_modes+0x270>
	{
		if (array_animation_index >= 7) array_animation_index = 0;
 5e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 5e6:	87 30       	cpi	r24, 0x07	; 7
 5e8:	10 f0       	brcs	.+4      	; 0x5ee <dynamic_color_modes+0x1ae>
 5ea:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <array_animation_index>
		float cof = (float)sin(animation_ticks * 3.1415f / 180.f);
 5ee:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <__data_end>
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	d3 d1       	rcall	.+934    	; 0x9a0 <__floatsisf>
 5fa:	26 e5       	ldi	r18, 0x56	; 86
 5fc:	3e e0       	ldi	r19, 0x0E	; 14
 5fe:	49 e4       	ldi	r20, 0x49	; 73
 600:	50 e4       	ldi	r21, 0x40	; 64
 602:	5a d2       	rcall	.+1204   	; 0xab8 <__mulsf3>
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	44 e3       	ldi	r20, 0x34	; 52
 60a:	53 e4       	ldi	r21, 0x43	; 67
 60c:	33 d1       	rcall	.+614    	; 0x874 <__divsf3>
 60e:	bf d2       	rcall	.+1406   	; 0xb8e <sin>
 610:	6b 01       	movw	r12, r22
 612:	7c 01       	movw	r14, r24
		RGB color = {
			(uint8_t)((float)rainbow_colors[array_animation_index].r * cof),
 614:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	8c 01       	movw	r16, r24
 61c:	00 0f       	add	r16, r16
 61e:	11 1f       	adc	r17, r17
 620:	08 0f       	add	r16, r24
 622:	19 1f       	adc	r17, r25
 624:	08 58       	subi	r16, 0x88	; 136
 626:	1f 4f       	sbci	r17, 0xFF	; 255
 628:	f8 01       	movw	r30, r16
 62a:	60 81       	ld	r22, Z
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	b4 d1       	rcall	.+872    	; 0x99c <__floatunsisf>
 634:	9b 01       	movw	r18, r22
 636:	ac 01       	movw	r20, r24
 638:	c7 01       	movw	r24, r14
 63a:	b6 01       	movw	r22, r12
 63c:	3d d2       	rcall	.+1146   	; 0xab8 <__mulsf3>
 63e:	82 d1       	rcall	.+772    	; 0x944 <__fixunssfsi>
 640:	b6 2e       	mov	r11, r22
			(uint8_t)((float)rainbow_colors[array_animation_index].g * cof),
 642:	f8 01       	movw	r30, r16
 644:	61 81       	ldd	r22, Z+1	; 0x01
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	a7 d1       	rcall	.+846    	; 0x99c <__floatunsisf>
 64e:	9b 01       	movw	r18, r22
 650:	ac 01       	movw	r20, r24
 652:	c7 01       	movw	r24, r14
 654:	b6 01       	movw	r22, r12
 656:	30 d2       	rcall	.+1120   	; 0xab8 <__mulsf3>
 658:	75 d1       	rcall	.+746    	; 0x944 <__fixunssfsi>
 65a:	a6 2e       	mov	r10, r22
			(uint8_t)((float)rainbow_colors[array_animation_index].b * cof)
 65c:	f8 01       	movw	r30, r16
 65e:	62 81       	ldd	r22, Z+2	; 0x02
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	9a d1       	rcall	.+820    	; 0x99c <__floatunsisf>
 668:	9b 01       	movw	r18, r22
 66a:	ac 01       	movw	r20, r24
 66c:	c7 01       	movw	r24, r14
 66e:	b6 01       	movw	r22, r12
 670:	23 d2       	rcall	.+1094   	; 0xab8 <__mulsf3>
 672:	68 d1       	rcall	.+720    	; 0x944 <__fixunssfsi>
 674:	86 2f       	mov	r24, r22
		};
		setLedStripColor(color, led_count);
 676:	42 e2       	ldi	r20, 0x22	; 34
 678:	6b 2d       	mov	r22, r11
 67a:	7a 2d       	mov	r23, r10
 67c:	fb dc       	rcall	.-1546   	; 0x74 <setLedStripColor>
		if (animation_ticks == 180)
 67e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 682:	84 3b       	cpi	r24, 0xB4	; 180
 684:	39 f4       	brne	.+14     	; 0x694 <dynamic_color_modes+0x254>
		{
			animation_ticks = 0;
 686:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
			array_animation_index++;
 68a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <array_animation_index>
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <array_animation_index>
		}
		animation_ticks += 1;
 694:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 698:	8f 5f       	subi	r24, 0xFF	; 255
 69a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
 69e:	ff ef       	ldi	r31, 0xFF	; 255
 6a0:	23 ef       	ldi	r18, 0xF3	; 243
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	f1 50       	subi	r31, 0x01	; 1
 6a6:	20 40       	sbci	r18, 0x00	; 0
 6a8:	80 40       	sbci	r24, 0x00	; 0
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <dynamic_color_modes+0x264>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <dynamic_color_modes+0x26e>
 6ae:	00 00       	nop
		_delay_ms(40);
	}
 6b0:	e0 96       	adiw	r28, 0x30	; 48
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	bf 90       	pop	r11
 6ce:	af 90       	pop	r10
 6d0:	08 95       	ret

000006d2 <main>:
	uint8_t modes_count = 13;
	// ------------------------
		
	// Pins configuration
		// Avoid module       PB0 INPUT
	DDRB &= ~(1<<0);
 6d2:	87 b3       	in	r24, 0x17	; 23
 6d4:	8e 7f       	andi	r24, 0xFE	; 254
 6d6:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<0);
 6d8:	88 b3       	in	r24, 0x18	; 24
 6da:	8e 7f       	andi	r24, 0xFE	; 254
 6dc:	88 bb       	out	0x18, r24	; 24
		// Led strip          PB1 OUTPUT
	DDRB |= (1<<1);
 6de:	87 b3       	in	r24, 0x17	; 23
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<1);
 6e4:	88 b3       	in	r24, 0x18	; 24
 6e6:	8d 7f       	andi	r24, 0xFD	; 253
 6e8:	88 bb       	out	0x18, r24	; 24
		// Button             PB2 INPUT PULL-UP
	DDRB &= ~(1<<2);
 6ea:	87 b3       	in	r24, 0x17	; 23
 6ec:	8b 7f       	andi	r24, 0xFB	; 251
 6ee:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<2);
 6f0:	88 b3       	in	r24, 0x18	; 24
 6f2:	84 60       	ori	r24, 0x04	; 4
 6f4:	88 bb       	out	0x18, r24	; 24
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	81 ee       	ldi	r24, 0xE1	; 225
 6fa:	94 e0       	ldi	r25, 0x04	; 4
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	90 40       	sbci	r25, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <main+0x2a>
 704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x34>
 706:	00 00       	nop
	_delay_ms(100);
	// ----------------
	
	// Start program
		// Set start-up rainbow color during 5 sec.
	setLedStripArray((RGB *)rainbow_colors, sizeof(rainbow_colors), led_count);
 708:	42 e2       	ldi	r20, 0x22	; 34
 70a:	65 e1       	ldi	r22, 0x15	; 21
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	88 e7       	ldi	r24, 0x78	; 120
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	c2 dd       	rcall	.-1148   	; 0x298 <setLedStripArray>
 714:	2f ef       	ldi	r18, 0xFF	; 255
 716:	83 e2       	ldi	r24, 0x23	; 35
 718:	94 ef       	ldi	r25, 0xF4	; 244
 71a:	21 50       	subi	r18, 0x01	; 1
 71c:	80 40       	sbci	r24, 0x00	; 0
 71e:	90 40       	sbci	r25, 0x00	; 0
 720:	e1 f7       	brne	.-8      	; 0x71a <main+0x48>
 722:	00 c0       	rjmp	.+0      	; 0x724 <main+0x52>
 724:	00 00       	nop
	_delay_ms(5000);
	
		// Clean led strip
	ledStripOFF(led_count);
 726:	82 e2       	ldi	r24, 0x22	; 34
 728:	08 dd       	rcall	.-1520   	; 0x13a <ledStripOFF>
 72a:	2f ef       	ldi	r18, 0xFF	; 255
 72c:	84 e3       	ldi	r24, 0x34	; 52
 72e:	9c e0       	ldi	r25, 0x0C	; 12
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <main+0x5e>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x68>
 73a:	00 00       	nop
void dynamic_color_modes(void);

int main(void)
{
	// Flags & system variables
	uint8_t avoid_flag = 0;
 73c:	c0 e0       	ldi	r28, 0x00	; 0
	ledStripOFF(led_count);
	_delay_ms(250);
	
    while (1) 
    {	
		uint8_t pins = PINB;
 73e:	86 b3       	in	r24, 0x16	; 22
		// Avoid module
		if (~pins & (1<<0))
 740:	80 fd       	sbrc	r24, 0
 742:	30 c0       	rjmp	.+96     	; 0x7a4 <main+0xd2>
		{
			switch (avoid_flag)
 744:	cc 23       	and	r28, r28
 746:	19 f0       	breq	.+6      	; 0x74e <main+0x7c>
 748:	c1 30       	cpi	r28, 0x01	; 1
 74a:	41 f0       	breq	.+16     	; 0x75c <main+0x8a>
 74c:	16 c0       	rjmp	.+44     	; 0x77a <main+0xa8>
			{
				case 0:
					avoid_flag = !avoid_flag;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	c1 11       	cpse	r28, r1
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	c8 2f       	mov	r28, r24
					static_color_modes();
 756:	26 de       	rcall	.-948    	; 0x3a4 <static_color_modes>
					halh_dynamic_color_modes();
 758:	5c de       	rcall	.-840    	; 0x412 <halh_dynamic_color_modes>
					break;
 75a:	0f c0       	rjmp	.+30     	; 0x77a <main+0xa8>
				
				case 1:
					avoid_flag = !avoid_flag;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	c1 11       	cpse	r28, r1
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	c8 2f       	mov	r28, r24
					ledStripOFF(led_count);
 764:	82 e2       	ldi	r24, 0x22	; 34
 766:	e9 dc       	rcall	.-1582   	; 0x13a <ledStripOFF>
 768:	2f ef       	ldi	r18, 0xFF	; 255
 76a:	80 e7       	ldi	r24, 0x70	; 112
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	21 50       	subi	r18, 0x01	; 1
 770:	80 40       	sbci	r24, 0x00	; 0
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	e1 f7       	brne	.-8      	; 0x76e <main+0x9c>
 776:	00 c0       	rjmp	.+0      	; 0x778 <main+0xa6>
 778:	00 00       	nop
 77a:	2f ef       	ldi	r18, 0xFF	; 255
 77c:	89 e6       	ldi	r24, 0x69	; 105
 77e:	98 e1       	ldi	r25, 0x18	; 24
 780:	21 50       	subi	r18, 0x01	; 1
 782:	80 40       	sbci	r24, 0x00	; 0
 784:	90 40       	sbci	r25, 0x00	; 0
 786:	e1 f7       	brne	.-8      	; 0x780 <main+0xae>
 788:	00 c0       	rjmp	.+0      	; 0x78a <main+0xb8>
 78a:	00 00       	nop
				
				default:
					break;
			}
			_delay_ms(500);
			while (~PINB & (1<<0));
 78c:	b0 9b       	sbis	0x16, 0	; 22
 78e:	fe cf       	rjmp	.-4      	; 0x78c <main+0xba>
 790:	2f ef       	ldi	r18, 0xFF	; 255
 792:	89 e6       	ldi	r24, 0x69	; 105
 794:	98 e1       	ldi	r25, 0x18	; 24
 796:	21 50       	subi	r18, 0x01	; 1
 798:	80 40       	sbci	r24, 0x00	; 0
 79a:	90 40       	sbci	r25, 0x00	; 0
 79c:	e1 f7       	brne	.-8      	; 0x796 <main+0xc4>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0xce>
 7a0:	00 00       	nop
 7a2:	cd cf       	rjmp	.-102    	; 0x73e <main+0x6c>
			_delay_ms(500);
		}
		// Button
		else if (~pins & (1<<2))
 7a4:	82 fd       	sbrc	r24, 2
 7a6:	22 c0       	rjmp	.+68     	; 0x7ec <main+0x11a>
		{
			if (led_strip_mode >= modes_count - 1)
 7a8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <led_strip_mode>
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	2c 30       	cpi	r18, 0x0C	; 12
 7b2:	31 05       	cpc	r19, r1
 7b4:	1c f0       	brlt	.+6      	; 0x7bc <main+0xea>
			{
				led_strip_mode = 0;
 7b6:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <led_strip_mode>
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <main+0xf0>
			}
			else
			{
				led_strip_mode++;
 7bc:	8f 5f       	subi	r24, 0xFF	; 255
 7be:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <led_strip_mode>
 7c2:	2f ef       	ldi	r18, 0xFF	; 255
 7c4:	84 e3       	ldi	r24, 0x34	; 52
 7c6:	9c e0       	ldi	r25, 0x0C	; 12
 7c8:	21 50       	subi	r18, 0x01	; 1
 7ca:	80 40       	sbci	r24, 0x00	; 0
 7cc:	90 40       	sbci	r25, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <main+0xf6>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <main+0x100>
 7d2:	00 00       	nop
			}
			_delay_ms(250);
			while (~PINB & (1<<2));
 7d4:	b2 9b       	sbis	0x16, 2	; 22
 7d6:	fe cf       	rjmp	.-4      	; 0x7d4 <main+0x102>
 7d8:	2f ef       	ldi	r18, 0xFF	; 255
 7da:	84 e3       	ldi	r24, 0x34	; 52
 7dc:	9c e0       	ldi	r25, 0x0C	; 12
 7de:	21 50       	subi	r18, 0x01	; 1
 7e0:	80 40       	sbci	r24, 0x00	; 0
 7e2:	90 40       	sbci	r25, 0x00	; 0
 7e4:	e1 f7       	brne	.-8      	; 0x7de <main+0x10c>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <main+0x116>
 7e8:	00 00       	nop
 7ea:	a9 cf       	rjmp	.-174    	; 0x73e <main+0x6c>
			_delay_ms(250);
		}
		// Led strip modes
		else if (avoid_flag)
 7ec:	cc 23       	and	r28, r28
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <main+0x120>
 7f0:	a6 cf       	rjmp	.-180    	; 0x73e <main+0x6c>
		{
			dynamic_color_modes();
 7f2:	26 de       	rcall	.-948    	; 0x440 <dynamic_color_modes>
 7f4:	a4 cf       	rjmp	.-184    	; 0x73e <main+0x6c>

000007f6 <__vector_10>:
#include <avr/interrupt.h>

uint64_t counter_ms;

ISR(TIMER0_COMPA_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
	counter_ms++;
 812:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <counter_ms>
 816:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <counter_ms+0x1>
 81a:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <counter_ms+0x2>
 81e:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <counter_ms+0x3>
 822:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <counter_ms+0x4>
 826:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <counter_ms+0x5>
 82a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <counter_ms+0x6>
 82e:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <counter_ms+0x7>
 832:	a1 e0       	ldi	r26, 0x01	; 1
 834:	a3 d2       	rcall	.+1350   	; 0xd7c <__adddi3_s8>
 836:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <counter_ms>
 83a:	30 93 94 00 	sts	0x0094, r19	; 0x800094 <counter_ms+0x1>
 83e:	40 93 95 00 	sts	0x0095, r20	; 0x800095 <counter_ms+0x2>
 842:	50 93 96 00 	sts	0x0096, r21	; 0x800096 <counter_ms+0x3>
 846:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <counter_ms+0x4>
 84a:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <counter_ms+0x5>
 84e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <counter_ms+0x6>
 852:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <counter_ms+0x7>
	TCNT0 = 0;
 856:	12 be       	out	0x32, r1	; 50
}
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__divsf3>:
 874:	0c d0       	rcall	.+24     	; 0x88e <__divsf3x>
 876:	e6 c0       	rjmp	.+460    	; 0xa44 <__fp_round>
 878:	de d0       	rcall	.+444    	; 0xa36 <__fp_pscB>
 87a:	40 f0       	brcs	.+16     	; 0x88c <__divsf3+0x18>
 87c:	d5 d0       	rcall	.+426    	; 0xa28 <__fp_pscA>
 87e:	30 f0       	brcs	.+12     	; 0x88c <__divsf3+0x18>
 880:	21 f4       	brne	.+8      	; 0x88a <__divsf3+0x16>
 882:	5f 3f       	cpi	r21, 0xFF	; 255
 884:	19 f0       	breq	.+6      	; 0x88c <__divsf3+0x18>
 886:	c7 c0       	rjmp	.+398    	; 0xa16 <__fp_inf>
 888:	51 11       	cpse	r21, r1
 88a:	10 c1       	rjmp	.+544    	; 0xaac <__fp_szero>
 88c:	ca c0       	rjmp	.+404    	; 0xa22 <__fp_nan>

0000088e <__divsf3x>:
 88e:	eb d0       	rcall	.+470    	; 0xa66 <__fp_split3>
 890:	98 f3       	brcs	.-26     	; 0x878 <__divsf3+0x4>

00000892 <__divsf3_pse>:
 892:	99 23       	and	r25, r25
 894:	c9 f3       	breq	.-14     	; 0x888 <__divsf3+0x14>
 896:	55 23       	and	r21, r21
 898:	b1 f3       	breq	.-20     	; 0x886 <__divsf3+0x12>
 89a:	95 1b       	sub	r25, r21
 89c:	55 0b       	sbc	r21, r21
 89e:	bb 27       	eor	r27, r27
 8a0:	aa 27       	eor	r26, r26
 8a2:	62 17       	cp	r22, r18
 8a4:	73 07       	cpc	r23, r19
 8a6:	84 07       	cpc	r24, r20
 8a8:	38 f0       	brcs	.+14     	; 0x8b8 <__divsf3_pse+0x26>
 8aa:	9f 5f       	subi	r25, 0xFF	; 255
 8ac:	5f 4f       	sbci	r21, 0xFF	; 255
 8ae:	22 0f       	add	r18, r18
 8b0:	33 1f       	adc	r19, r19
 8b2:	44 1f       	adc	r20, r20
 8b4:	aa 1f       	adc	r26, r26
 8b6:	a9 f3       	breq	.-22     	; 0x8a2 <__divsf3_pse+0x10>
 8b8:	33 d0       	rcall	.+102    	; 0x920 <__divsf3_pse+0x8e>
 8ba:	0e 2e       	mov	r0, r30
 8bc:	3a f0       	brmi	.+14     	; 0x8cc <__divsf3_pse+0x3a>
 8be:	e0 e8       	ldi	r30, 0x80	; 128
 8c0:	30 d0       	rcall	.+96     	; 0x922 <__divsf3_pse+0x90>
 8c2:	91 50       	subi	r25, 0x01	; 1
 8c4:	50 40       	sbci	r21, 0x00	; 0
 8c6:	e6 95       	lsr	r30
 8c8:	00 1c       	adc	r0, r0
 8ca:	ca f7       	brpl	.-14     	; 0x8be <__divsf3_pse+0x2c>
 8cc:	29 d0       	rcall	.+82     	; 0x920 <__divsf3_pse+0x8e>
 8ce:	fe 2f       	mov	r31, r30
 8d0:	27 d0       	rcall	.+78     	; 0x920 <__divsf3_pse+0x8e>
 8d2:	66 0f       	add	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	bb 1f       	adc	r27, r27
 8da:	26 17       	cp	r18, r22
 8dc:	37 07       	cpc	r19, r23
 8de:	48 07       	cpc	r20, r24
 8e0:	ab 07       	cpc	r26, r27
 8e2:	b0 e8       	ldi	r27, 0x80	; 128
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <__divsf3_pse+0x56>
 8e6:	bb 0b       	sbc	r27, r27
 8e8:	80 2d       	mov	r24, r0
 8ea:	bf 01       	movw	r22, r30
 8ec:	ff 27       	eor	r31, r31
 8ee:	93 58       	subi	r25, 0x83	; 131
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	2a f0       	brmi	.+10     	; 0x8fe <__divsf3_pse+0x6c>
 8f4:	9e 3f       	cpi	r25, 0xFE	; 254
 8f6:	51 05       	cpc	r21, r1
 8f8:	68 f0       	brcs	.+26     	; 0x914 <__divsf3_pse+0x82>
 8fa:	8d c0       	rjmp	.+282    	; 0xa16 <__fp_inf>
 8fc:	d7 c0       	rjmp	.+430    	; 0xaac <__fp_szero>
 8fe:	5f 3f       	cpi	r21, 0xFF	; 255
 900:	ec f3       	brlt	.-6      	; 0x8fc <__divsf3_pse+0x6a>
 902:	98 3e       	cpi	r25, 0xE8	; 232
 904:	dc f3       	brlt	.-10     	; 0x8fc <__divsf3_pse+0x6a>
 906:	86 95       	lsr	r24
 908:	77 95       	ror	r23
 90a:	67 95       	ror	r22
 90c:	b7 95       	ror	r27
 90e:	f7 95       	ror	r31
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	c9 f7       	brne	.-14     	; 0x906 <__divsf3_pse+0x74>
 914:	88 0f       	add	r24, r24
 916:	91 1d       	adc	r25, r1
 918:	96 95       	lsr	r25
 91a:	87 95       	ror	r24
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret
 920:	e1 e0       	ldi	r30, 0x01	; 1
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	bb 1f       	adc	r27, r27
 92a:	62 17       	cp	r22, r18
 92c:	73 07       	cpc	r23, r19
 92e:	84 07       	cpc	r24, r20
 930:	ba 07       	cpc	r27, r26
 932:	20 f0       	brcs	.+8      	; 0x93c <__divsf3_pse+0xaa>
 934:	62 1b       	sub	r22, r18
 936:	73 0b       	sbc	r23, r19
 938:	84 0b       	sbc	r24, r20
 93a:	ba 0b       	sbc	r27, r26
 93c:	ee 1f       	adc	r30, r30
 93e:	88 f7       	brcc	.-30     	; 0x922 <__divsf3_pse+0x90>
 940:	e0 95       	com	r30
 942:	08 95       	ret

00000944 <__fixunssfsi>:
 944:	98 d0       	rcall	.+304    	; 0xa76 <__fp_splitA>
 946:	88 f0       	brcs	.+34     	; 0x96a <__fixunssfsi+0x26>
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	90 f0       	brcs	.+36     	; 0x970 <__fixunssfsi+0x2c>
 94c:	b9 2f       	mov	r27, r25
 94e:	99 27       	eor	r25, r25
 950:	b7 51       	subi	r27, 0x17	; 23
 952:	a0 f0       	brcs	.+40     	; 0x97c <__fixunssfsi+0x38>
 954:	d1 f0       	breq	.+52     	; 0x98a <__fixunssfsi+0x46>
 956:	66 0f       	add	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	1a f0       	brmi	.+6      	; 0x966 <__fixunssfsi+0x22>
 960:	ba 95       	dec	r27
 962:	c9 f7       	brne	.-14     	; 0x956 <__fixunssfsi+0x12>
 964:	12 c0       	rjmp	.+36     	; 0x98a <__fixunssfsi+0x46>
 966:	b1 30       	cpi	r27, 0x01	; 1
 968:	81 f0       	breq	.+32     	; 0x98a <__fixunssfsi+0x46>
 96a:	9f d0       	rcall	.+318    	; 0xaaa <__fp_zero>
 96c:	b1 e0       	ldi	r27, 0x01	; 1
 96e:	08 95       	ret
 970:	9c c0       	rjmp	.+312    	; 0xaaa <__fp_zero>
 972:	67 2f       	mov	r22, r23
 974:	78 2f       	mov	r23, r24
 976:	88 27       	eor	r24, r24
 978:	b8 5f       	subi	r27, 0xF8	; 248
 97a:	39 f0       	breq	.+14     	; 0x98a <__fixunssfsi+0x46>
 97c:	b9 3f       	cpi	r27, 0xF9	; 249
 97e:	cc f3       	brlt	.-14     	; 0x972 <__fixunssfsi+0x2e>
 980:	86 95       	lsr	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	b3 95       	inc	r27
 988:	d9 f7       	brne	.-10     	; 0x980 <__fixunssfsi+0x3c>
 98a:	3e f4       	brtc	.+14     	; 0x99a <__fixunssfsi+0x56>
 98c:	90 95       	com	r25
 98e:	80 95       	com	r24
 990:	70 95       	com	r23
 992:	61 95       	neg	r22
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	08 95       	ret

0000099c <__floatunsisf>:
 99c:	e8 94       	clt
 99e:	09 c0       	rjmp	.+18     	; 0x9b2 <__floatsisf+0x12>

000009a0 <__floatsisf>:
 9a0:	97 fb       	bst	r25, 7
 9a2:	3e f4       	brtc	.+14     	; 0x9b2 <__floatsisf+0x12>
 9a4:	90 95       	com	r25
 9a6:	80 95       	com	r24
 9a8:	70 95       	com	r23
 9aa:	61 95       	neg	r22
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	99 23       	and	r25, r25
 9b4:	a9 f0       	breq	.+42     	; 0x9e0 <__floatsisf+0x40>
 9b6:	f9 2f       	mov	r31, r25
 9b8:	96 e9       	ldi	r25, 0x96	; 150
 9ba:	bb 27       	eor	r27, r27
 9bc:	93 95       	inc	r25
 9be:	f6 95       	lsr	r31
 9c0:	87 95       	ror	r24
 9c2:	77 95       	ror	r23
 9c4:	67 95       	ror	r22
 9c6:	b7 95       	ror	r27
 9c8:	f1 11       	cpse	r31, r1
 9ca:	f8 cf       	rjmp	.-16     	; 0x9bc <__floatsisf+0x1c>
 9cc:	fa f4       	brpl	.+62     	; 0xa0c <__floatsisf+0x6c>
 9ce:	bb 0f       	add	r27, r27
 9d0:	11 f4       	brne	.+4      	; 0x9d6 <__floatsisf+0x36>
 9d2:	60 ff       	sbrs	r22, 0
 9d4:	1b c0       	rjmp	.+54     	; 0xa0c <__floatsisf+0x6c>
 9d6:	6f 5f       	subi	r22, 0xFF	; 255
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8f 4f       	sbci	r24, 0xFF	; 255
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	16 c0       	rjmp	.+44     	; 0xa0c <__floatsisf+0x6c>
 9e0:	88 23       	and	r24, r24
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__floatsisf+0x48>
 9e4:	96 e9       	ldi	r25, 0x96	; 150
 9e6:	11 c0       	rjmp	.+34     	; 0xa0a <__floatsisf+0x6a>
 9e8:	77 23       	and	r23, r23
 9ea:	21 f0       	breq	.+8      	; 0x9f4 <__floatsisf+0x54>
 9ec:	9e e8       	ldi	r25, 0x8E	; 142
 9ee:	87 2f       	mov	r24, r23
 9f0:	76 2f       	mov	r23, r22
 9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__floatsisf+0x5e>
 9f4:	66 23       	and	r22, r22
 9f6:	71 f0       	breq	.+28     	; 0xa14 <__floatsisf+0x74>
 9f8:	96 e8       	ldi	r25, 0x86	; 134
 9fa:	86 2f       	mov	r24, r22
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	2a f0       	brmi	.+10     	; 0xa0c <__floatsisf+0x6c>
 a02:	9a 95       	dec	r25
 a04:	66 0f       	add	r22, r22
 a06:	77 1f       	adc	r23, r23
 a08:	88 1f       	adc	r24, r24
 a0a:	da f7       	brpl	.-10     	; 0xa02 <__floatsisf+0x62>
 a0c:	88 0f       	add	r24, r24
 a0e:	96 95       	lsr	r25
 a10:	87 95       	ror	r24
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <__fp_inf>:
 a16:	97 f9       	bld	r25, 7
 a18:	9f 67       	ori	r25, 0x7F	; 127
 a1a:	80 e8       	ldi	r24, 0x80	; 128
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	08 95       	ret

00000a22 <__fp_nan>:
 a22:	9f ef       	ldi	r25, 0xFF	; 255
 a24:	80 ec       	ldi	r24, 0xC0	; 192
 a26:	08 95       	ret

00000a28 <__fp_pscA>:
 a28:	00 24       	eor	r0, r0
 a2a:	0a 94       	dec	r0
 a2c:	16 16       	cp	r1, r22
 a2e:	17 06       	cpc	r1, r23
 a30:	18 06       	cpc	r1, r24
 a32:	09 06       	cpc	r0, r25
 a34:	08 95       	ret

00000a36 <__fp_pscB>:
 a36:	00 24       	eor	r0, r0
 a38:	0a 94       	dec	r0
 a3a:	12 16       	cp	r1, r18
 a3c:	13 06       	cpc	r1, r19
 a3e:	14 06       	cpc	r1, r20
 a40:	05 06       	cpc	r0, r21
 a42:	08 95       	ret

00000a44 <__fp_round>:
 a44:	09 2e       	mov	r0, r25
 a46:	03 94       	inc	r0
 a48:	00 0c       	add	r0, r0
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0xc>
 a4c:	88 23       	and	r24, r24
 a4e:	52 f0       	brmi	.+20     	; 0xa64 <__fp_round+0x20>
 a50:	bb 0f       	add	r27, r27
 a52:	40 f4       	brcc	.+16     	; 0xa64 <__fp_round+0x20>
 a54:	bf 2b       	or	r27, r31
 a56:	11 f4       	brne	.+4      	; 0xa5c <__fp_round+0x18>
 a58:	60 ff       	sbrs	r22, 0
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__fp_round+0x20>
 a5c:	6f 5f       	subi	r22, 0xFF	; 255
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <__fp_split3>:
 a66:	57 fd       	sbrc	r21, 7
 a68:	90 58       	subi	r25, 0x80	; 128
 a6a:	44 0f       	add	r20, r20
 a6c:	55 1f       	adc	r21, r21
 a6e:	59 f0       	breq	.+22     	; 0xa86 <__fp_splitA+0x10>
 a70:	5f 3f       	cpi	r21, 0xFF	; 255
 a72:	71 f0       	breq	.+28     	; 0xa90 <__fp_splitA+0x1a>
 a74:	47 95       	ror	r20

00000a76 <__fp_splitA>:
 a76:	88 0f       	add	r24, r24
 a78:	97 fb       	bst	r25, 7
 a7a:	99 1f       	adc	r25, r25
 a7c:	61 f0       	breq	.+24     	; 0xa96 <__fp_splitA+0x20>
 a7e:	9f 3f       	cpi	r25, 0xFF	; 255
 a80:	79 f0       	breq	.+30     	; 0xaa0 <__fp_splitA+0x2a>
 a82:	87 95       	ror	r24
 a84:	08 95       	ret
 a86:	12 16       	cp	r1, r18
 a88:	13 06       	cpc	r1, r19
 a8a:	14 06       	cpc	r1, r20
 a8c:	55 1f       	adc	r21, r21
 a8e:	f2 cf       	rjmp	.-28     	; 0xa74 <__fp_split3+0xe>
 a90:	46 95       	lsr	r20
 a92:	f1 df       	rcall	.-30     	; 0xa76 <__fp_splitA>
 a94:	08 c0       	rjmp	.+16     	; 0xaa6 <__fp_splitA+0x30>
 a96:	16 16       	cp	r1, r22
 a98:	17 06       	cpc	r1, r23
 a9a:	18 06       	cpc	r1, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	f1 cf       	rjmp	.-30     	; 0xa82 <__fp_splitA+0xc>
 aa0:	86 95       	lsr	r24
 aa2:	71 05       	cpc	r23, r1
 aa4:	61 05       	cpc	r22, r1
 aa6:	08 94       	sec
 aa8:	08 95       	ret

00000aaa <__fp_zero>:
 aaa:	e8 94       	clt

00000aac <__fp_szero>:
 aac:	bb 27       	eor	r27, r27
 aae:	66 27       	eor	r22, r22
 ab0:	77 27       	eor	r23, r23
 ab2:	cb 01       	movw	r24, r22
 ab4:	97 f9       	bld	r25, 7
 ab6:	08 95       	ret

00000ab8 <__mulsf3>:
 ab8:	0a d0       	rcall	.+20     	; 0xace <__mulsf3x>
 aba:	c4 cf       	rjmp	.-120    	; 0xa44 <__fp_round>
 abc:	b5 df       	rcall	.-150    	; 0xa28 <__fp_pscA>
 abe:	28 f0       	brcs	.+10     	; 0xaca <__mulsf3+0x12>
 ac0:	ba df       	rcall	.-140    	; 0xa36 <__fp_pscB>
 ac2:	18 f0       	brcs	.+6      	; 0xaca <__mulsf3+0x12>
 ac4:	95 23       	and	r25, r21
 ac6:	09 f0       	breq	.+2      	; 0xaca <__mulsf3+0x12>
 ac8:	a6 cf       	rjmp	.-180    	; 0xa16 <__fp_inf>
 aca:	ab cf       	rjmp	.-170    	; 0xa22 <__fp_nan>
 acc:	ef cf       	rjmp	.-34     	; 0xaac <__fp_szero>

00000ace <__mulsf3x>:
 ace:	cb df       	rcall	.-106    	; 0xa66 <__fp_split3>
 ad0:	a8 f3       	brcs	.-22     	; 0xabc <__mulsf3+0x4>

00000ad2 <__mulsf3_pse>:
 ad2:	99 23       	and	r25, r25
 ad4:	d9 f3       	breq	.-10     	; 0xacc <__mulsf3+0x14>
 ad6:	55 23       	and	r21, r21
 ad8:	c9 f3       	breq	.-14     	; 0xacc <__mulsf3+0x14>
 ada:	95 0f       	add	r25, r21
 adc:	50 e0       	ldi	r21, 0x00	; 0
 ade:	55 1f       	adc	r21, r21
 ae0:	aa 27       	eor	r26, r26
 ae2:	ee 27       	eor	r30, r30
 ae4:	ff 27       	eor	r31, r31
 ae6:	bb 27       	eor	r27, r27
 ae8:	00 24       	eor	r0, r0
 aea:	08 94       	sec
 aec:	67 95       	ror	r22
 aee:	20 f4       	brcc	.+8      	; 0xaf8 <__mulsf3_pse+0x26>
 af0:	e2 0f       	add	r30, r18
 af2:	f3 1f       	adc	r31, r19
 af4:	b4 1f       	adc	r27, r20
 af6:	0a 1e       	adc	r0, r26
 af8:	22 0f       	add	r18, r18
 afa:	33 1f       	adc	r19, r19
 afc:	44 1f       	adc	r20, r20
 afe:	aa 1f       	adc	r26, r26
 b00:	66 95       	lsr	r22
 b02:	a9 f7       	brne	.-22     	; 0xaee <__mulsf3_pse+0x1c>
 b04:	77 95       	ror	r23
 b06:	30 f4       	brcc	.+12     	; 0xb14 <__mulsf3_pse+0x42>
 b08:	f3 0f       	add	r31, r19
 b0a:	b4 1f       	adc	r27, r20
 b0c:	0a 1e       	adc	r0, r26
 b0e:	12 1e       	adc	r1, r18
 b10:	08 f4       	brcc	.+2      	; 0xb14 <__mulsf3_pse+0x42>
 b12:	63 95       	inc	r22
 b14:	33 0f       	add	r19, r19
 b16:	44 1f       	adc	r20, r20
 b18:	aa 1f       	adc	r26, r26
 b1a:	22 1f       	adc	r18, r18
 b1c:	76 95       	lsr	r23
 b1e:	99 f7       	brne	.-26     	; 0xb06 <__mulsf3_pse+0x34>
 b20:	87 95       	ror	r24
 b22:	20 f4       	brcc	.+8      	; 0xb2c <__mulsf3_pse+0x5a>
 b24:	b4 0f       	add	r27, r20
 b26:	0a 1e       	adc	r0, r26
 b28:	12 1e       	adc	r1, r18
 b2a:	63 1f       	adc	r22, r19
 b2c:	44 0f       	add	r20, r20
 b2e:	aa 1f       	adc	r26, r26
 b30:	22 1f       	adc	r18, r18
 b32:	33 1f       	adc	r19, r19
 b34:	86 95       	lsr	r24
 b36:	a9 f7       	brne	.-22     	; 0xb22 <__mulsf3_pse+0x50>
 b38:	86 2f       	mov	r24, r22
 b3a:	71 2d       	mov	r23, r1
 b3c:	60 2d       	mov	r22, r0
 b3e:	11 24       	eor	r1, r1
 b40:	9f 57       	subi	r25, 0x7F	; 127
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	8a f0       	brmi	.+34     	; 0xb68 <__mulsf3_pse+0x96>
 b46:	e1 f0       	breq	.+56     	; 0xb80 <__mulsf3_pse+0xae>
 b48:	88 23       	and	r24, r24
 b4a:	4a f0       	brmi	.+18     	; 0xb5e <__mulsf3_pse+0x8c>
 b4c:	ee 0f       	add	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	bb 1f       	adc	r27, r27
 b52:	66 1f       	adc	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	91 50       	subi	r25, 0x01	; 1
 b5a:	50 40       	sbci	r21, 0x00	; 0
 b5c:	a9 f7       	brne	.-22     	; 0xb48 <__mulsf3_pse+0x76>
 b5e:	9e 3f       	cpi	r25, 0xFE	; 254
 b60:	51 05       	cpc	r21, r1
 b62:	70 f0       	brcs	.+28     	; 0xb80 <__mulsf3_pse+0xae>
 b64:	58 cf       	rjmp	.-336    	; 0xa16 <__fp_inf>
 b66:	a2 cf       	rjmp	.-188    	; 0xaac <__fp_szero>
 b68:	5f 3f       	cpi	r21, 0xFF	; 255
 b6a:	ec f3       	brlt	.-6      	; 0xb66 <__mulsf3_pse+0x94>
 b6c:	98 3e       	cpi	r25, 0xE8	; 232
 b6e:	dc f3       	brlt	.-10     	; 0xb66 <__mulsf3_pse+0x94>
 b70:	86 95       	lsr	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	b7 95       	ror	r27
 b78:	f7 95       	ror	r31
 b7a:	e7 95       	ror	r30
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	c1 f7       	brne	.-16     	; 0xb70 <__mulsf3_pse+0x9e>
 b80:	fe 2b       	or	r31, r30
 b82:	88 0f       	add	r24, r24
 b84:	91 1d       	adc	r25, r1
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <sin>:
 b8e:	9f 93       	push	r25
 b90:	05 d0       	rcall	.+10     	; 0xb9c <__fp_rempio2>
 b92:	0f 90       	pop	r0
 b94:	07 fc       	sbrc	r0, 7
 b96:	ee 5f       	subi	r30, 0xFE	; 254
 b98:	28 c0       	rjmp	.+80     	; 0xbea <__fp_sinus>
 b9a:	43 cf       	rjmp	.-378    	; 0xa22 <__fp_nan>

00000b9c <__fp_rempio2>:
 b9c:	6c df       	rcall	.-296    	; 0xa76 <__fp_splitA>
 b9e:	e8 f3       	brcs	.-6      	; 0xb9a <sin+0xc>
 ba0:	e8 94       	clt
 ba2:	e0 e0       	ldi	r30, 0x00	; 0
 ba4:	bb 27       	eor	r27, r27
 ba6:	9f 57       	subi	r25, 0x7F	; 127
 ba8:	f0 f0       	brcs	.+60     	; 0xbe6 <__fp_rempio2+0x4a>
 baa:	2a ed       	ldi	r18, 0xDA	; 218
 bac:	3f e0       	ldi	r19, 0x0F	; 15
 bae:	49 ec       	ldi	r20, 0xC9	; 201
 bb0:	06 c0       	rjmp	.+12     	; 0xbbe <__fp_rempio2+0x22>
 bb2:	ee 0f       	add	r30, r30
 bb4:	bb 0f       	add	r27, r27
 bb6:	66 1f       	adc	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	28 f0       	brcs	.+10     	; 0xbc8 <__fp_rempio2+0x2c>
 bbe:	b2 3a       	cpi	r27, 0xA2	; 162
 bc0:	62 07       	cpc	r22, r18
 bc2:	73 07       	cpc	r23, r19
 bc4:	84 07       	cpc	r24, r20
 bc6:	28 f0       	brcs	.+10     	; 0xbd2 <__fp_rempio2+0x36>
 bc8:	b2 5a       	subi	r27, 0xA2	; 162
 bca:	62 0b       	sbc	r22, r18
 bcc:	73 0b       	sbc	r23, r19
 bce:	84 0b       	sbc	r24, r20
 bd0:	e3 95       	inc	r30
 bd2:	9a 95       	dec	r25
 bd4:	72 f7       	brpl	.-36     	; 0xbb2 <__fp_rempio2+0x16>
 bd6:	80 38       	cpi	r24, 0x80	; 128
 bd8:	30 f4       	brcc	.+12     	; 0xbe6 <__fp_rempio2+0x4a>
 bda:	9a 95       	dec	r25
 bdc:	bb 0f       	add	r27, r27
 bde:	66 1f       	adc	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	d2 f7       	brpl	.-12     	; 0xbda <__fp_rempio2+0x3e>
 be6:	90 48       	sbci	r25, 0x80	; 128
 be8:	73 c0       	rjmp	.+230    	; 0xcd0 <__fp_mpack_finite>

00000bea <__fp_sinus>:
 bea:	ef 93       	push	r30
 bec:	e0 ff       	sbrs	r30, 0
 bee:	06 c0       	rjmp	.+12     	; 0xbfc <__fp_sinus+0x12>
 bf0:	a2 ea       	ldi	r26, 0xA2	; 162
 bf2:	2a ed       	ldi	r18, 0xDA	; 218
 bf4:	3f e0       	ldi	r19, 0x0F	; 15
 bf6:	49 ec       	ldi	r20, 0xC9	; 201
 bf8:	5f eb       	ldi	r21, 0xBF	; 191
 bfa:	15 d0       	rcall	.+42     	; 0xc26 <__addsf3x>
 bfc:	23 df       	rcall	.-442    	; 0xa44 <__fp_round>
 bfe:	0f 90       	pop	r0
 c00:	03 94       	inc	r0
 c02:	01 fc       	sbrc	r0, 1
 c04:	90 58       	subi	r25, 0x80	; 128
 c06:	ee e1       	ldi	r30, 0x1E	; 30
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	6e c0       	rjmp	.+220    	; 0xce8 <__fp_powsodd>
 c0c:	0d df       	rcall	.-486    	; 0xa28 <__fp_pscA>
 c0e:	30 f0       	brcs	.+12     	; 0xc1c <__fp_sinus+0x32>
 c10:	12 df       	rcall	.-476    	; 0xa36 <__fp_pscB>
 c12:	20 f0       	brcs	.+8      	; 0xc1c <__fp_sinus+0x32>
 c14:	31 f4       	brne	.+12     	; 0xc22 <__fp_sinus+0x38>
 c16:	9f 3f       	cpi	r25, 0xFF	; 255
 c18:	11 f4       	brne	.+4      	; 0xc1e <__fp_sinus+0x34>
 c1a:	1e f4       	brtc	.+6      	; 0xc22 <__fp_sinus+0x38>
 c1c:	02 cf       	rjmp	.-508    	; 0xa22 <__fp_nan>
 c1e:	0e f4       	brtc	.+2      	; 0xc22 <__fp_sinus+0x38>
 c20:	e0 95       	com	r30
 c22:	e7 fb       	bst	r30, 7
 c24:	f8 ce       	rjmp	.-528    	; 0xa16 <__fp_inf>

00000c26 <__addsf3x>:
 c26:	e9 2f       	mov	r30, r25
 c28:	1e df       	rcall	.-452    	; 0xa66 <__fp_split3>
 c2a:	80 f3       	brcs	.-32     	; 0xc0c <__fp_sinus+0x22>
 c2c:	ba 17       	cp	r27, r26
 c2e:	62 07       	cpc	r22, r18
 c30:	73 07       	cpc	r23, r19
 c32:	84 07       	cpc	r24, r20
 c34:	95 07       	cpc	r25, r21
 c36:	18 f0       	brcs	.+6      	; 0xc3e <__addsf3x+0x18>
 c38:	71 f4       	brne	.+28     	; 0xc56 <__addsf3x+0x30>
 c3a:	9e f5       	brtc	.+102    	; 0xca2 <__addsf3x+0x7c>
 c3c:	36 cf       	rjmp	.-404    	; 0xaaa <__fp_zero>
 c3e:	0e f4       	brtc	.+2      	; 0xc42 <__addsf3x+0x1c>
 c40:	e0 95       	com	r30
 c42:	0b 2e       	mov	r0, r27
 c44:	ba 2f       	mov	r27, r26
 c46:	a0 2d       	mov	r26, r0
 c48:	0b 01       	movw	r0, r22
 c4a:	b9 01       	movw	r22, r18
 c4c:	90 01       	movw	r18, r0
 c4e:	0c 01       	movw	r0, r24
 c50:	ca 01       	movw	r24, r20
 c52:	a0 01       	movw	r20, r0
 c54:	11 24       	eor	r1, r1
 c56:	ff 27       	eor	r31, r31
 c58:	59 1b       	sub	r21, r25
 c5a:	99 f0       	breq	.+38     	; 0xc82 <__addsf3x+0x5c>
 c5c:	59 3f       	cpi	r21, 0xF9	; 249
 c5e:	50 f4       	brcc	.+20     	; 0xc74 <__addsf3x+0x4e>
 c60:	50 3e       	cpi	r21, 0xE0	; 224
 c62:	68 f1       	brcs	.+90     	; 0xcbe <__addsf3x+0x98>
 c64:	1a 16       	cp	r1, r26
 c66:	f0 40       	sbci	r31, 0x00	; 0
 c68:	a2 2f       	mov	r26, r18
 c6a:	23 2f       	mov	r18, r19
 c6c:	34 2f       	mov	r19, r20
 c6e:	44 27       	eor	r20, r20
 c70:	58 5f       	subi	r21, 0xF8	; 248
 c72:	f3 cf       	rjmp	.-26     	; 0xc5a <__addsf3x+0x34>
 c74:	46 95       	lsr	r20
 c76:	37 95       	ror	r19
 c78:	27 95       	ror	r18
 c7a:	a7 95       	ror	r26
 c7c:	f0 40       	sbci	r31, 0x00	; 0
 c7e:	53 95       	inc	r21
 c80:	c9 f7       	brne	.-14     	; 0xc74 <__addsf3x+0x4e>
 c82:	7e f4       	brtc	.+30     	; 0xca2 <__addsf3x+0x7c>
 c84:	1f 16       	cp	r1, r31
 c86:	ba 0b       	sbc	r27, r26
 c88:	62 0b       	sbc	r22, r18
 c8a:	73 0b       	sbc	r23, r19
 c8c:	84 0b       	sbc	r24, r20
 c8e:	ba f0       	brmi	.+46     	; 0xcbe <__addsf3x+0x98>
 c90:	91 50       	subi	r25, 0x01	; 1
 c92:	a1 f0       	breq	.+40     	; 0xcbc <__addsf3x+0x96>
 c94:	ff 0f       	add	r31, r31
 c96:	bb 1f       	adc	r27, r27
 c98:	66 1f       	adc	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	c2 f7       	brpl	.-16     	; 0xc90 <__addsf3x+0x6a>
 ca0:	0e c0       	rjmp	.+28     	; 0xcbe <__addsf3x+0x98>
 ca2:	ba 0f       	add	r27, r26
 ca4:	62 1f       	adc	r22, r18
 ca6:	73 1f       	adc	r23, r19
 ca8:	84 1f       	adc	r24, r20
 caa:	48 f4       	brcc	.+18     	; 0xcbe <__addsf3x+0x98>
 cac:	87 95       	ror	r24
 cae:	77 95       	ror	r23
 cb0:	67 95       	ror	r22
 cb2:	b7 95       	ror	r27
 cb4:	f7 95       	ror	r31
 cb6:	9e 3f       	cpi	r25, 0xFE	; 254
 cb8:	08 f0       	brcs	.+2      	; 0xcbc <__addsf3x+0x96>
 cba:	b3 cf       	rjmp	.-154    	; 0xc22 <__fp_sinus+0x38>
 cbc:	93 95       	inc	r25
 cbe:	88 0f       	add	r24, r24
 cc0:	08 f0       	brcs	.+2      	; 0xcc4 <__addsf3x+0x9e>
 cc2:	99 27       	eor	r25, r25
 cc4:	ee 0f       	add	r30, r30
 cc6:	97 95       	ror	r25
 cc8:	87 95       	ror	r24
 cca:	08 95       	ret

00000ccc <__fp_mpack>:
 ccc:	9f 3f       	cpi	r25, 0xFF	; 255
 cce:	31 f0       	breq	.+12     	; 0xcdc <__fp_mpack_finite+0xc>

00000cd0 <__fp_mpack_finite>:
 cd0:	91 50       	subi	r25, 0x01	; 1
 cd2:	20 f4       	brcc	.+8      	; 0xcdc <__fp_mpack_finite+0xc>
 cd4:	87 95       	ror	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	b7 95       	ror	r27
 cdc:	88 0f       	add	r24, r24
 cde:	91 1d       	adc	r25, r1
 ce0:	96 95       	lsr	r25
 ce2:	87 95       	ror	r24
 ce4:	97 f9       	bld	r25, 7
 ce6:	08 95       	ret

00000ce8 <__fp_powsodd>:
 ce8:	9f 93       	push	r25
 cea:	8f 93       	push	r24
 cec:	7f 93       	push	r23
 cee:	6f 93       	push	r22
 cf0:	ff 93       	push	r31
 cf2:	ef 93       	push	r30
 cf4:	9b 01       	movw	r18, r22
 cf6:	ac 01       	movw	r20, r24
 cf8:	df de       	rcall	.-578    	; 0xab8 <__mulsf3>
 cfa:	ef 91       	pop	r30
 cfc:	ff 91       	pop	r31
 cfe:	05 d0       	rcall	.+10     	; 0xd0a <__fp_powser>
 d00:	2f 91       	pop	r18
 d02:	3f 91       	pop	r19
 d04:	4f 91       	pop	r20
 d06:	5f 91       	pop	r21
 d08:	d7 ce       	rjmp	.-594    	; 0xab8 <__mulsf3>

00000d0a <__fp_powser>:
 d0a:	df 93       	push	r29
 d0c:	cf 93       	push	r28
 d0e:	1f 93       	push	r17
 d10:	0f 93       	push	r16
 d12:	ff 92       	push	r15
 d14:	ef 92       	push	r14
 d16:	df 92       	push	r13
 d18:	7b 01       	movw	r14, r22
 d1a:	8c 01       	movw	r16, r24
 d1c:	68 94       	set
 d1e:	05 c0       	rjmp	.+10     	; 0xd2a <__fp_powser+0x20>
 d20:	da 2e       	mov	r13, r26
 d22:	ef 01       	movw	r28, r30
 d24:	d4 de       	rcall	.-600    	; 0xace <__mulsf3x>
 d26:	fe 01       	movw	r30, r28
 d28:	e8 94       	clt
 d2a:	a5 91       	lpm	r26, Z+
 d2c:	25 91       	lpm	r18, Z+
 d2e:	35 91       	lpm	r19, Z+
 d30:	45 91       	lpm	r20, Z+
 d32:	55 91       	lpm	r21, Z+
 d34:	ae f3       	brts	.-22     	; 0xd20 <__fp_powser+0x16>
 d36:	ef 01       	movw	r28, r30
 d38:	76 df       	rcall	.-276    	; 0xc26 <__addsf3x>
 d3a:	fe 01       	movw	r30, r28
 d3c:	97 01       	movw	r18, r14
 d3e:	a8 01       	movw	r20, r16
 d40:	da 94       	dec	r13
 d42:	79 f7       	brne	.-34     	; 0xd22 <__fp_powser+0x18>
 d44:	df 90       	pop	r13
 d46:	ef 90       	pop	r14
 d48:	ff 90       	pop	r15
 d4a:	0f 91       	pop	r16
 d4c:	1f 91       	pop	r17
 d4e:	cf 91       	pop	r28
 d50:	df 91       	pop	r29
 d52:	08 95       	ret

00000d54 <__udivmodhi4>:
 d54:	aa 1b       	sub	r26, r26
 d56:	bb 1b       	sub	r27, r27
 d58:	51 e1       	ldi	r21, 0x11	; 17
 d5a:	07 c0       	rjmp	.+14     	; 0xd6a <__udivmodhi4_ep>

00000d5c <__udivmodhi4_loop>:
 d5c:	aa 1f       	adc	r26, r26
 d5e:	bb 1f       	adc	r27, r27
 d60:	a6 17       	cp	r26, r22
 d62:	b7 07       	cpc	r27, r23
 d64:	10 f0       	brcs	.+4      	; 0xd6a <__udivmodhi4_ep>
 d66:	a6 1b       	sub	r26, r22
 d68:	b7 0b       	sbc	r27, r23

00000d6a <__udivmodhi4_ep>:
 d6a:	88 1f       	adc	r24, r24
 d6c:	99 1f       	adc	r25, r25
 d6e:	5a 95       	dec	r21
 d70:	a9 f7       	brne	.-22     	; 0xd5c <__udivmodhi4_loop>
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	bc 01       	movw	r22, r24
 d78:	cd 01       	movw	r24, r26
 d7a:	08 95       	ret

00000d7c <__adddi3_s8>:
 d7c:	00 24       	eor	r0, r0
 d7e:	a7 fd       	sbrc	r26, 7
 d80:	00 94       	com	r0
 d82:	2a 0f       	add	r18, r26
 d84:	30 1d       	adc	r19, r0
 d86:	40 1d       	adc	r20, r0
 d88:	50 1d       	adc	r21, r0
 d8a:	60 1d       	adc	r22, r0
 d8c:	70 1d       	adc	r23, r0
 d8e:	80 1d       	adc	r24, r0
 d90:	90 1d       	adc	r25, r0
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
