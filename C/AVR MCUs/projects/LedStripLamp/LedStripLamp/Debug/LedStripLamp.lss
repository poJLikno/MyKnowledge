
LedStripLamp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000006bc  00000750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e6  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083b  00000000  00000000  00001952  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab7  00000000  00000000  0000218d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000495  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b4  00000000  00000000  00003225  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a6 e6       	ldi	r26, 0x66	; 102
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	ab 36       	cpi	r26, 0x6B	; 107
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>

0000003a <__do_copy_data>:
  3a:	10 e0       	ldi	r17, 0x00	; 0
  3c:	a0 e6       	ldi	r26, 0x60	; 96
  3e:	b0 e0       	ldi	r27, 0x00	; 0
  40:	ec eb       	ldi	r30, 0xBC	; 188
  42:	f6 e0       	ldi	r31, 0x06	; 6
  44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
  46:	05 90       	lpm	r0, Z+
  48:	0d 92       	st	X+, r0
  4a:	a6 36       	cpi	r26, 0x66	; 102
  4c:	b1 07       	cpc	r27, r17
  4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>
  50:	b4 d1       	rcall	.+872    	; 0x3ba <main>
  52:	32 c3       	rjmp	.+1636   	; 0x6b8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <pinMode>:
			case LOW:
				PORTB &= ~(1<<pin_number);
				break;
			
			case HIGH:
				PORTB |= (1<<pin_number);
  56:	81 11       	cpse	r24, r1
  58:	35 c0       	rjmp	.+106    	; 0xc4 <pinMode+0x6e>
  5a:	41 30       	cpi	r20, 0x01	; 1
  5c:	a1 f0       	breq	.+40     	; 0x86 <pinMode+0x30>
  5e:	18 f0       	brcs	.+6      	; 0x66 <pinMode+0x10>
  60:	42 30       	cpi	r20, 0x02	; 2
  62:	09 f1       	breq	.+66     	; 0xa6 <pinMode+0x50>
  64:	08 95       	ret
  66:	27 b3       	in	r18, 0x17	; 23
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	02 c0       	rjmp	.+4      	; 0x72 <pinMode+0x1c>
  6e:	88 0f       	add	r24, r24
  70:	99 1f       	adc	r25, r25
  72:	6a 95       	dec	r22
  74:	e2 f7       	brpl	.-8      	; 0x6e <pinMode+0x18>
  76:	80 95       	com	r24
  78:	92 2f       	mov	r25, r18
  7a:	98 23       	and	r25, r24
  7c:	97 bb       	out	0x17, r25	; 23
  7e:	98 b3       	in	r25, 0x18	; 24
  80:	89 23       	and	r24, r25
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret
  86:	27 b3       	in	r18, 0x17	; 23
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <pinMode+0x3c>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <pinMode+0x38>
  96:	92 2f       	mov	r25, r18
  98:	98 2b       	or	r25, r24
  9a:	97 bb       	out	0x17, r25	; 23
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	80 95       	com	r24
  a0:	89 23       	and	r24, r25
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	08 95       	ret
  a6:	27 b3       	in	r18, 0x17	; 23
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <pinMode+0x5c>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <pinMode+0x58>
  b6:	98 2f       	mov	r25, r24
  b8:	90 95       	com	r25
  ba:	92 23       	and	r25, r18
  bc:	97 bb       	out	0x17, r25	; 23
  be:	98 b3       	in	r25, 0x18	; 24
  c0:	89 2b       	or	r24, r25
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	08 95       	ret

000000c6 <digitalRead>:
	}
}

uint8_t digitalRead(PinLetters pin_letter, uint8_t pin_number)
{
	if (pin_letter == B)
  c6:	81 11       	cpse	r24, r1
  c8:	0a c0       	rjmp	.+20     	; 0xde <digitalRead+0x18>
	{
		return PINB & (1<<pin_number);
  ca:	26 b3       	in	r18, 0x16	; 22
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <digitalRead+0x10>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <digitalRead+0xc>
  da:	82 23       	and	r24, r18
  dc:	08 95       	ret
	}
	else
	{
		return 0;
  de:	80 e0       	ldi	r24, 0x00	; 0
	}
  e0:	08 95       	ret

000000e2 <ledStripInit>:

void setLedColor(RGB color, uint8_t *buffer);

void ledStripInit(uint8_t led_count)
{
	ledCount = led_count;
  e2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
  e6:	08 95       	ret

000000e8 <setByte>:
	setByte(color.b, 16, buffer);
}

void setByte(uint8_t simple_color, uint8_t start_index, uint8_t *buffer)
{
	uint8_t i = start_index + 7;
  e8:	69 5f       	subi	r22, 0xF9	; 249
	while (simple_color != 1 && simple_color > 0)
  ea:	08 c0       	rjmp	.+16     	; 0xfc <setByte+0x14>
	{
		buffer[i] = simple_color % 2;
  ec:	fa 01       	movw	r30, r20
  ee:	e6 0f       	add	r30, r22
  f0:	f1 1d       	adc	r31, r1
  f2:	98 2f       	mov	r25, r24
  f4:	91 70       	andi	r25, 0x01	; 1
  f6:	90 83       	st	Z, r25
		simple_color /= 2;
  f8:	86 95       	lsr	r24
		i--;
  fa:	61 50       	subi	r22, 0x01	; 1
}

void setByte(uint8_t simple_color, uint8_t start_index, uint8_t *buffer)
{
	uint8_t i = start_index + 7;
	while (simple_color != 1 && simple_color > 0)
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	b0 f7       	brcc	.-20     	; 0xec <setByte+0x4>
	{
		buffer[i] = simple_color % 2;
		simple_color /= 2;
		i--;
	}
	buffer[i] = simple_color;
 100:	fa 01       	movw	r30, r20
 102:	e6 0f       	add	r30, r22
 104:	f1 1d       	adc	r31, r1
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <setLedColor>:
		}
	}
}

void setLedColor(RGB color, uint8_t *buffer)
{
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	06 2f       	mov	r16, r22
 114:	18 2f       	mov	r17, r24
 116:	ea 01       	movw	r28, r20
	setByte(color.g, 0, buffer);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	87 2f       	mov	r24, r23
 11c:	e5 df       	rcall	.-54     	; 0xe8 <setByte>
	setByte(color.r, 8, buffer);
 11e:	ae 01       	movw	r20, r28
 120:	68 e0       	ldi	r22, 0x08	; 8
 122:	80 2f       	mov	r24, r16
 124:	e1 df       	rcall	.-62     	; 0xe8 <setByte>
	setByte(color.b, 16, buffer);
 126:	ae 01       	movw	r20, r28
 128:	60 e1       	ldi	r22, 0x10	; 16
 12a:	81 2f       	mov	r24, r17
 12c:	dd df       	rcall	.-70     	; 0xe8 <setByte>
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <sendBit>:
	buffer[i] = simple_color;
}

void sendBit(uint8_t bit)
{
	if (!bit)
 138:	81 11       	cpse	r24, r1
 13a:	0b c0       	rjmp	.+22     	; 0x152 <sendBit+0x1a>
	{
		PORTB = 2;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <sendBit+0xa>
		_delay_us(0.3375);
		PORTB = 0;
 146:	18 ba       	out	0x18, r1	; 24
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <sendBit+0x12>
 14e:	00 00       	nop
 150:	08 95       	ret
		_delay_us(0.7875);
	}
	else if (bit)
 152:	88 23       	and	r24, r24
 154:	51 f0       	breq	.+20     	; 0x16a <sendBit+0x32>
	{
		PORTB = 2;
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	88 bb       	out	0x18, r24	; 24
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <sendBit+0x24>
		_delay_us(0.7375);
		PORTB = 0;
 160:	18 ba       	out	0x18, r1	; 24
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <sendBit+0x2c>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <ledStripOFF>:
		errorFunc();
	}	
}

void ledStripOFF(void)
{		
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	// Send message
	uint16_t i = 0;
	for (i = 0; i < ledCount * 24; i++)
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
 174:	03 c0       	rjmp	.+6      	; 0x17c <ledStripOFF+0x10>
	{
		sendBit(0);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	df df       	rcall	.-66     	; 0x138 <sendBit>

void ledStripOFF(void)
{		
	// Send message
	uint16_t i = 0;
	for (i = 0; i < ledCount * 24; i++)
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	9c 01       	movw	r18, r24
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	c8 17       	cp	r28, r24
 19a:	d9 07       	cpc	r29, r25
 19c:	60 f3       	brcs	.-40     	; 0x176 <ledStripOFF+0xa>
	{
		sendBit(0);
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <ledStripRainbow>:

void ledStripRainbow(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	uint8_t l = 0, i = 0;
	for (l = 0; l < ledCount; l += 7)
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	98 c0       	rjmp	.+304    	; 0x2dc <__stack+0x7d>
	{
		// Red
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	c4 df       	rcall	.-120    	; 0x138 <sendBit>
{
	uint8_t l = 0, i = 0;
	for (l = 0; l < ledCount; l += 7)
	{
		// Red
		for (i = 0; i < 8; i++)
 1b0:	cf 5f       	subi	r28, 0xFF	; 255
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <ledStripRainbow+0x12>
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	c8 30       	cpi	r28, 0x08	; 8
 1b8:	c8 f3       	brcs	.-14     	; 0x1ac <ledStripRainbow+0x8>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <ledStripRainbow+0x20>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	bb df       	rcall	.-138    	; 0x138 <sendBit>
		// Red
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
 1c4:	c8 30       	cpi	r28, 0x08	; 8
 1c6:	d8 f3       	brcs	.-10     	; 0x1be <ledStripRainbow+0x1a>
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <ledStripRainbow+0x2e>
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	b4 df       	rcall	.-152    	; 0x138 <sendBit>
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
 1d2:	c8 30       	cpi	r28, 0x08	; 8
 1d4:	d8 f3       	brcs	.-10     	; 0x1cc <ledStripRainbow+0x28>
		{
			sendBit(0);
		}
		
		// Orange
		sendBit(1);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	af df       	rcall	.-162    	; 0x138 <sendBit>
		for (i = 0; i < 7; i++)
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <ledStripRainbow+0x40>
		{
			sendBit(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	ab df       	rcall	.-170    	; 0x138 <sendBit>
			sendBit(0);
		}
		
		// Orange
		sendBit(1);
		for (i = 0; i < 7; i++)
 1e2:	cf 5f       	subi	r28, 0xFF	; 255
 1e4:	c7 30       	cpi	r28, 0x07	; 7
 1e6:	d8 f3       	brcs	.-10     	; 0x1de <ledStripRainbow+0x3a>
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <ledStripRainbow+0x4e>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	a4 df       	rcall	.-184    	; 0x138 <sendBit>
		sendBit(1);
		for (i = 0; i < 7; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 1f0:	cf 5f       	subi	r28, 0xFF	; 255
 1f2:	c8 30       	cpi	r28, 0x08	; 8
 1f4:	d8 f3       	brcs	.-10     	; 0x1ec <ledStripRainbow+0x48>
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <__DATA_REGION_LENGTH__>
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	9d df       	rcall	.-198    	; 0x138 <sendBit>
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	c8 30       	cpi	r28, 0x08	; 8
 202:	d8 f3       	brcs	.-10     	; 0x1fa <ledStripRainbow+0x56>
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	03 c0       	rjmp	.+6      	; 0x20e <__DATA_REGION_LENGTH__+0xe>
		}
		
		// Yellow
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	96 df       	rcall	.-212    	; 0x138 <sendBit>
		{
			sendBit(0);
		}
		
		// Yellow
		for (i = 0; i < 8; i++)
 20c:	cf 5f       	subi	r28, 0xFF	; 255
 20e:	c8 30       	cpi	r28, 0x08	; 8
 210:	d8 f3       	brcs	.-10     	; 0x208 <__DATA_REGION_LENGTH__+0x8>
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	03 c0       	rjmp	.+6      	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	8f df       	rcall	.-226    	; 0x138 <sendBit>
		// Yellow
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	c8 30       	cpi	r28, 0x08	; 8
 21e:	d8 f3       	brcs	.-10     	; 0x216 <__DATA_REGION_LENGTH__+0x16>
 220:	c0 e0       	ldi	r28, 0x00	; 0
 222:	03 c0       	rjmp	.+6      	; 0x22a <__DATA_REGION_LENGTH__+0x2a>
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	88 df       	rcall	.-240    	; 0x138 <sendBit>
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
 228:	cf 5f       	subi	r28, 0xFF	; 255
 22a:	c8 30       	cpi	r28, 0x08	; 8
 22c:	d8 f3       	brcs	.-10     	; 0x224 <__DATA_REGION_LENGTH__+0x24>
 22e:	c0 e0       	ldi	r28, 0x00	; 0
 230:	03 c0       	rjmp	.+6      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
		}
		
		// Green
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	81 df       	rcall	.-254    	; 0x138 <sendBit>
		{
			sendBit(0);
		}
		
		// Green
		for (i = 0; i < 8; i++)
 236:	cf 5f       	subi	r28, 0xFF	; 255
 238:	c8 30       	cpi	r28, 0x08	; 8
 23a:	d8 f3       	brcs	.-10     	; 0x232 <__DATA_REGION_LENGTH__+0x32>
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	03 c0       	rjmp	.+6      	; 0x246 <__DATA_REGION_LENGTH__+0x46>
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	7a df       	rcall	.-268    	; 0x138 <sendBit>
		// Green
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
 244:	cf 5f       	subi	r28, 0xFF	; 255
 246:	c8 30       	cpi	r28, 0x08	; 8
 248:	d8 f3       	brcs	.-10     	; 0x240 <__DATA_REGION_LENGTH__+0x40>
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	03 c0       	rjmp	.+6      	; 0x254 <__DATA_REGION_LENGTH__+0x54>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	73 df       	rcall	.-282    	; 0x138 <sendBit>
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	c8 30       	cpi	r28, 0x08	; 8
 256:	d8 f3       	brcs	.-10     	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	03 c0       	rjmp	.+6      	; 0x262 <__stack+0x3>
		}
		
		// Cyan
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	6c df       	rcall	.-296    	; 0x138 <sendBit>
		{
			sendBit(0);
		}
		
		// Cyan
		for (i = 0; i < 8; i++)
 260:	cf 5f       	subi	r28, 0xFF	; 255
 262:	c8 30       	cpi	r28, 0x08	; 8
 264:	d8 f3       	brcs	.-10     	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	03 c0       	rjmp	.+6      	; 0x270 <__stack+0x11>
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	65 df       	rcall	.-310    	; 0x138 <sendBit>
		// Cyan
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
		for (i = 0; i < 8; i++)
 26e:	cf 5f       	subi	r28, 0xFF	; 255
 270:	c8 30       	cpi	r28, 0x08	; 8
 272:	d8 f3       	brcs	.-10     	; 0x26a <__stack+0xb>
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	03 c0       	rjmp	.+6      	; 0x27e <__stack+0x1f>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	5e df       	rcall	.-324    	; 0x138 <sendBit>
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 27c:	cf 5f       	subi	r28, 0xFF	; 255
 27e:	c8 30       	cpi	r28, 0x08	; 8
 280:	d8 f3       	brcs	.-10     	; 0x278 <__stack+0x19>
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	03 c0       	rjmp	.+6      	; 0x28c <__stack+0x2d>
		}
		
		// Blue
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	57 df       	rcall	.-338    	; 0x138 <sendBit>
		{
			sendBit(1);
		}
		
		// Blue
		for (i = 0; i < 8; i++)
 28a:	cf 5f       	subi	r28, 0xFF	; 255
 28c:	c8 30       	cpi	r28, 0x08	; 8
 28e:	d8 f3       	brcs	.-10     	; 0x286 <__stack+0x27>
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	03 c0       	rjmp	.+6      	; 0x29a <__stack+0x3b>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	50 df       	rcall	.-352    	; 0x138 <sendBit>
		// Blue
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 298:	cf 5f       	subi	r28, 0xFF	; 255
 29a:	c8 30       	cpi	r28, 0x08	; 8
 29c:	d8 f3       	brcs	.-10     	; 0x294 <__stack+0x35>
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <__stack+0x49>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	49 df       	rcall	.-366    	; 0x138 <sendBit>
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 2a6:	cf 5f       	subi	r28, 0xFF	; 255
 2a8:	c8 30       	cpi	r28, 0x08	; 8
 2aa:	d8 f3       	brcs	.-10     	; 0x2a2 <__stack+0x43>
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <__stack+0x57>
		}
		
		// Purple
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	42 df       	rcall	.-380    	; 0x138 <sendBit>
		{
			sendBit(1);
		}
		
		// Purple
		for (i = 0; i < 8; i++)
 2b4:	cf 5f       	subi	r28, 0xFF	; 255
 2b6:	c8 30       	cpi	r28, 0x08	; 8
 2b8:	d8 f3       	brcs	.-10     	; 0x2b0 <__stack+0x51>
		{
			sendBit(0);
		}
		sendBit(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	3d df       	rcall	.-390    	; 0x138 <sendBit>
		for (i = 0; i < 7; i++)
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <__stack+0x69>
		{
			sendBit(0);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	39 df       	rcall	.-398    	; 0x138 <sendBit>
		for (i = 0; i < 8; i++)
		{
			sendBit(0);
		}
		sendBit(1);
		for (i = 0; i < 7; i++)
 2c6:	cf 5f       	subi	r28, 0xFF	; 255
 2c8:	c7 30       	cpi	r28, 0x07	; 7
 2ca:	d8 f3       	brcs	.-10     	; 0x2c2 <__stack+0x63>
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <__stack+0x77>
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	32 df       	rcall	.-412    	; 0x138 <sendBit>
		sendBit(1);
		for (i = 0; i < 7; i++)
		{
			sendBit(0);
		}
		for (i = 0; i < 8; i++)
 2d4:	cf 5f       	subi	r28, 0xFF	; 255
 2d6:	c8 30       	cpi	r28, 0x08	; 8
 2d8:	d8 f3       	brcs	.-10     	; 0x2d0 <__stack+0x71>
}

void ledStripRainbow(void)
{
	uint8_t l = 0, i = 0;
	for (l = 0; l < ledCount; l += 7)
 2da:	d9 5f       	subi	r29, 0xF9	; 249
 2dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2e0:	d8 17       	cp	r29, r24
 2e2:	08 f4       	brcc	.+2      	; 0x2e6 <__stack+0x87>
 2e4:	67 cf       	rjmp	.-306    	; 0x1b4 <ledStripRainbow+0x10>
		for (i = 0; i < 8; i++)
		{
			sendBit(1);
		}
	}
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <errorFunc>:
{	
	// Blink red led
	uint8_t l = 0, i = 0;
	while (1)
	{
		for (l = 0; l < ledCount; l++)
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	16 c0       	rjmp	.+44     	; 0x31c <errorFunc+0x30>
		{
			for (i = 0; i < 8; i++)
			{
				sendBit(0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	22 df       	rcall	.-444    	; 0x138 <sendBit>
	uint8_t l = 0, i = 0;
	while (1)
	{
		for (l = 0; l < ledCount; l++)
		{
			for (i = 0; i < 8; i++)
 2f4:	cf 5f       	subi	r28, 0xFF	; 255
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <errorFunc+0xe>
 2f8:	c0 e0       	ldi	r28, 0x00	; 0
 2fa:	c8 30       	cpi	r28, 0x08	; 8
 2fc:	c8 f3       	brcs	.-14     	; 0x2f0 <errorFunc+0x4>
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	03 c0       	rjmp	.+6      	; 0x308 <errorFunc+0x1c>
			{
				sendBit(0);
			}
			for (i = 0; i < 8; i++)
			{
				sendBit(1);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	19 df       	rcall	.-462    	; 0x138 <sendBit>
		{
			for (i = 0; i < 8; i++)
			{
				sendBit(0);
			}
			for (i = 0; i < 8; i++)
 306:	cf 5f       	subi	r28, 0xFF	; 255
 308:	c8 30       	cpi	r28, 0x08	; 8
 30a:	d8 f3       	brcs	.-10     	; 0x302 <errorFunc+0x16>
 30c:	c0 e0       	ldi	r28, 0x00	; 0
 30e:	03 c0       	rjmp	.+6      	; 0x316 <errorFunc+0x2a>
			{
				sendBit(1);
			}
			for (i = 0; i < 8; i++)
			{
				sendBit(0);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	12 df       	rcall	.-476    	; 0x138 <sendBit>
			}
			for (i = 0; i < 8; i++)
			{
				sendBit(1);
			}
			for (i = 0; i < 8; i++)
 314:	cf 5f       	subi	r28, 0xFF	; 255
 316:	c8 30       	cpi	r28, 0x08	; 8
 318:	d8 f3       	brcs	.-10     	; 0x310 <errorFunc+0x24>
{	
	// Blink red led
	uint8_t l = 0, i = 0;
	while (1)
	{
		for (l = 0; l < ledCount; l++)
 31a:	df 5f       	subi	r29, 0xFF	; 255
 31c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 320:	d8 17       	cp	r29, r24
 322:	50 f3       	brcs	.-44     	; 0x2f8 <errorFunc+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	89 e6       	ldi	r24, 0x69	; 105
 328:	98 e1       	ldi	r25, 0x18	; 24
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <errorFunc+0x3e>
 332:	00 c0       	rjmp	.+0      	; 0x334 <errorFunc+0x48>
 334:	00 00       	nop
			{
				sendBit(0);
			}
		}
		_delay_ms(500);
		ledStripOFF();
 336:	1a df       	rcall	.-460    	; 0x16c <ledStripOFF>
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	89 e6       	ldi	r24, 0x69	; 105
 33c:	98 e1       	ldi	r25, 0x18	; 24
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <errorFunc+0x52>
 346:	00 c0       	rjmp	.+0      	; 0x348 <errorFunc+0x5c>
 348:	00 00       	nop
 34a:	d0 cf       	rjmp	.-96     	; 0x2ec <errorFunc>

0000034c <ledStripON>:
{
	ledCount = led_count;
}

void ledStripON(RGB color)
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	6b 01       	movw	r12, r22
 35c:	e8 2e       	mov	r14, r24
	uint8_t *color_buffer = (uint8_t *)malloc((size_t)24);
 35e:	88 e1       	ldi	r24, 0x18	; 24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	89 d0       	rcall	.+274    	; 0x476 <malloc>
 364:	8c 01       	movw	r16, r24
	if (color_buffer)// color_buffer not NULL
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	e9 f0       	breq	.+58     	; 0x3a4 <ledStripON+0x58>
	{
		memset(color_buffer, 0, (size_t)24);
 36a:	88 e1       	ldi	r24, 0x18	; 24
 36c:	f8 01       	movw	r30, r16
 36e:	11 92       	st	Z+, r1
 370:	8a 95       	dec	r24
 372:	e9 f7       	brne	.-6      	; 0x36e <ledStripON+0x22>
		
		// Set color in buffer
		setLedColor(color, color_buffer);
 374:	a8 01       	movw	r20, r16
 376:	8e 2d       	mov	r24, r14
 378:	b6 01       	movw	r22, r12
 37a:	c7 de       	rcall	.-626    	; 0x10a <setLedColor>
		
		// Send message
		uint8_t l = 0, i = 0;
		for (l = 0; l < ledCount; l++)
 37c:	d0 e0       	ldi	r29, 0x00	; 0
 37e:	0b c0       	rjmp	.+22     	; 0x396 <ledStripON+0x4a>
		{
			for (i = 0; i < 24; i++)
			{
				sendBit(color_buffer[i]);
 380:	f8 01       	movw	r30, r16
 382:	ec 0f       	add	r30, r28
 384:	f1 1d       	adc	r31, r1
 386:	80 81       	ld	r24, Z
 388:	d7 de       	rcall	.-594    	; 0x138 <sendBit>
		
		// Send message
		uint8_t l = 0, i = 0;
		for (l = 0; l < ledCount; l++)
		{
			for (i = 0; i < 24; i++)
 38a:	cf 5f       	subi	r28, 0xFF	; 255
 38c:	01 c0       	rjmp	.+2      	; 0x390 <ledStripON+0x44>
 38e:	c0 e0       	ldi	r28, 0x00	; 0
 390:	c8 31       	cpi	r28, 0x18	; 24
 392:	b0 f3       	brcs	.-20     	; 0x380 <ledStripON+0x34>
		// Set color in buffer
		setLedColor(color, color_buffer);
		
		// Send message
		uint8_t l = 0, i = 0;
		for (l = 0; l < ledCount; l++)
 394:	df 5f       	subi	r29, 0xFF	; 255
 396:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 39a:	d8 17       	cp	r29, r24
 39c:	c0 f3       	brcs	.-16     	; 0x38e <ledStripON+0x42>
				sendBit(color_buffer[i]);
			}
		}
		
		// Clean up
		free(color_buffer);
 39e:	c8 01       	movw	r24, r16
 3a0:	02 d1       	rcall	.+516    	; 0x5a6 <free>
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <ledStripON+0x5e>
		color_buffer = NULL;
	}
	else if (!color_buffer) // Error
 3a4:	89 2b       	or	r24, r25
 3a6:	09 f4       	brne	.+2      	; 0x3aa <ledStripON+0x5e>
	{
		errorFunc();
 3a8:	a1 df       	rcall	.-190    	; 0x2ec <errorFunc>
	}	
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	08 95       	ret

000003ba <main>:

int main(void)
{
	// Led strip settings
	uint8_t led_count = 34;
	RGB led_strip_color = { 255, 155, 155 };
 3ba:	0f ef       	ldi	r16, 0xFF	; 255
 3bc:	1b e9       	ldi	r17, 0x9B	; 155
 3be:	db e9       	ldi	r29, 0x9B	; 155
		
	uint8_t flag = 0;
		
	// Configurate pins
	pinMode(B, 0, INPUT);
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	47 de       	rcall	.-882    	; 0x56 <pinMode>
	pinMode(B, 1, OUTPUT);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	43 de       	rcall	.-890    	; 0x56 <pinMode>
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	84 e3       	ldi	r24, 0x34	; 52
 3d4:	9c e0       	ldi	r25, 0x0C	; 12
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x1c>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x26>
 3e0:	00 00       	nop
	_delay_ms(250);
	
	ledStripInit(led_count);
 3e2:	82 e2       	ldi	r24, 0x22	; 34
 3e4:	7e de       	rcall	.-772    	; 0xe2 <ledStripInit>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	84 e3       	ldi	r24, 0x34	; 52
 3ea:	9c e0       	ldi	r25, 0x0C	; 12
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x32>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x3c>
 3f6:	00 00       	nop
	_delay_ms(250);
	
	ledStripRainbow();
 3f8:	d5 de       	rcall	.-598    	; 0x1a4 <ledStripRainbow>
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	83 e2       	ldi	r24, 0x23	; 35
 3fe:	94 ef       	ldi	r25, 0xF4	; 244
 400:	21 50       	subi	r18, 0x01	; 1
 402:	80 40       	sbci	r24, 0x00	; 0
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	_delay_ms(5000);
	
	ledStripOFF();
 40c:	af de       	rcall	.-674    	; 0x16c <ledStripOFF>
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	84 e3       	ldi	r24, 0x34	; 52
 412:	9c e0       	ldi	r25, 0x0C	; 12
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
{
	// Led strip settings
	uint8_t led_count = 34;
	RGB led_strip_color = { 255, 155, 155 };
		
	uint8_t flag = 0;
 420:	c0 e0       	ldi	r28, 0x00	; 0
	ledStripOFF();
	_delay_ms(250);
		
    while (1) 
    {
		if (!digitalRead(B, 0))
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	4f de       	rcall	.-866    	; 0xc6 <digitalRead>
 428:	81 11       	cpse	r24, r1
 42a:	fb cf       	rjmp	.-10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			switch (flag)
 42c:	cc 23       	and	r28, r28
 42e:	19 f0       	breq	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 430:	c1 30       	cpi	r28, 0x01	; 1
 432:	39 f0       	breq	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 434:	08 c0       	rjmp	.+16     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			{
				case 0:
					flag = 1;
					ledStripON(led_strip_color);
 436:	60 2f       	mov	r22, r16
 438:	71 2f       	mov	r23, r17
 43a:	8d 2f       	mov	r24, r29
 43c:	87 df       	rcall	.-242    	; 0x34c <ledStripON>
		if (!digitalRead(B, 0))
		{
			switch (flag)
			{
				case 0:
					flag = 1;
 43e:	c1 e0       	ldi	r28, 0x01	; 1
					ledStripON(led_strip_color);
					break;
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				
				case 1:
					flag = 0;
					ledStripOFF();
 442:	94 de       	rcall	.-728    	; 0x16c <ledStripOFF>
					flag = 1;
					ledStripON(led_strip_color);
					break;
				
				case 1:
					flag = 0;
 444:	c0 e0       	ldi	r28, 0x00	; 0
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	89 e6       	ldi	r24, 0x69	; 105
 44a:	98 e1       	ldi	r25, 0x18	; 24
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
				
				default:
					break;
			}
			_delay_ms(500);
			while (!digitalRead(B, 0));
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	34 de       	rcall	.-920    	; 0xc6 <digitalRead>
 45e:	88 23       	and	r24, r24
 460:	d9 f3       	breq	.-10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	89 e6       	ldi	r24, 0x69	; 105
 466:	98 e1       	ldi	r25, 0x18	; 24
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	d6 cf       	rjmp	.-84     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

00000476 <malloc>:
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	10 f4       	brcc	.+4      	; 0x488 <malloc+0x12>
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <__flp>
 48c:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <__flp+0x1>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	a0 e0       	ldi	r26, 0x00	; 0
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	30 97       	sbiw	r30, 0x00	; 0
 49a:	19 f1       	breq	.+70     	; 0x4e2 <malloc+0x6c>
 49c:	40 81       	ld	r20, Z
 49e:	51 81       	ldd	r21, Z+1	; 0x01
 4a0:	02 81       	ldd	r16, Z+2	; 0x02
 4a2:	13 81       	ldd	r17, Z+3	; 0x03
 4a4:	48 17       	cp	r20, r24
 4a6:	59 07       	cpc	r21, r25
 4a8:	c8 f0       	brcs	.+50     	; 0x4dc <malloc+0x66>
 4aa:	84 17       	cp	r24, r20
 4ac:	95 07       	cpc	r25, r21
 4ae:	69 f4       	brne	.+26     	; 0x4ca <malloc+0x54>
 4b0:	10 97       	sbiw	r26, 0x00	; 0
 4b2:	31 f0       	breq	.+12     	; 0x4c0 <malloc+0x4a>
 4b4:	12 96       	adiw	r26, 0x02	; 2
 4b6:	0c 93       	st	X, r16
 4b8:	12 97       	sbiw	r26, 0x02	; 2
 4ba:	13 96       	adiw	r26, 0x03	; 3
 4bc:	1c 93       	st	X, r17
 4be:	27 c0       	rjmp	.+78     	; 0x50e <malloc+0x98>
 4c0:	00 93 69 00 	sts	0x0069, r16	; 0x800069 <__flp>
 4c4:	10 93 6a 00 	sts	0x006A, r17	; 0x80006a <__flp+0x1>
 4c8:	22 c0       	rjmp	.+68     	; 0x50e <malloc+0x98>
 4ca:	21 15       	cp	r18, r1
 4cc:	31 05       	cpc	r19, r1
 4ce:	19 f0       	breq	.+6      	; 0x4d6 <malloc+0x60>
 4d0:	42 17       	cp	r20, r18
 4d2:	53 07       	cpc	r21, r19
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <malloc+0x66>
 4d6:	9a 01       	movw	r18, r20
 4d8:	bd 01       	movw	r22, r26
 4da:	ef 01       	movw	r28, r30
 4dc:	df 01       	movw	r26, r30
 4de:	f8 01       	movw	r30, r16
 4e0:	db cf       	rjmp	.-74     	; 0x498 <malloc+0x22>
 4e2:	21 15       	cp	r18, r1
 4e4:	31 05       	cpc	r19, r1
 4e6:	f9 f0       	breq	.+62     	; 0x526 <malloc+0xb0>
 4e8:	28 1b       	sub	r18, r24
 4ea:	39 0b       	sbc	r19, r25
 4ec:	24 30       	cpi	r18, 0x04	; 4
 4ee:	31 05       	cpc	r19, r1
 4f0:	80 f4       	brcc	.+32     	; 0x512 <malloc+0x9c>
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	9b 81       	ldd	r25, Y+3	; 0x03
 4f6:	61 15       	cp	r22, r1
 4f8:	71 05       	cpc	r23, r1
 4fa:	21 f0       	breq	.+8      	; 0x504 <malloc+0x8e>
 4fc:	fb 01       	movw	r30, r22
 4fe:	93 83       	std	Z+3, r25	; 0x03
 500:	82 83       	std	Z+2, r24	; 0x02
 502:	04 c0       	rjmp	.+8      	; 0x50c <malloc+0x96>
 504:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__flp+0x1>
 508:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__flp>
 50c:	fe 01       	movw	r30, r28
 50e:	32 96       	adiw	r30, 0x02	; 2
 510:	44 c0       	rjmp	.+136    	; 0x59a <malloc+0x124>
 512:	fe 01       	movw	r30, r28
 514:	e2 0f       	add	r30, r18
 516:	f3 1f       	adc	r31, r19
 518:	81 93       	st	Z+, r24
 51a:	91 93       	st	Z+, r25
 51c:	22 50       	subi	r18, 0x02	; 2
 51e:	31 09       	sbc	r19, r1
 520:	39 83       	std	Y+1, r19	; 0x01
 522:	28 83       	st	Y, r18
 524:	3a c0       	rjmp	.+116    	; 0x59a <malloc+0x124>
 526:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <__brkval>
 52a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__brkval+0x1>
 52e:	23 2b       	or	r18, r19
 530:	41 f4       	brne	.+16     	; 0x542 <malloc+0xcc>
 532:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 536:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 53a:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <__brkval+0x1>
 53e:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <__brkval>
 542:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 546:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 54a:	21 15       	cp	r18, r1
 54c:	31 05       	cpc	r19, r1
 54e:	41 f4       	brne	.+16     	; 0x560 <malloc+0xea>
 550:	2d b7       	in	r18, 0x3d	; 61
 552:	3e b7       	in	r19, 0x3e	; 62
 554:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 558:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 55c:	24 1b       	sub	r18, r20
 55e:	35 0b       	sbc	r19, r21
 560:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <__brkval>
 564:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <__brkval+0x1>
 568:	e2 17       	cp	r30, r18
 56a:	f3 07       	cpc	r31, r19
 56c:	a0 f4       	brcc	.+40     	; 0x596 <malloc+0x120>
 56e:	2e 1b       	sub	r18, r30
 570:	3f 0b       	sbc	r19, r31
 572:	28 17       	cp	r18, r24
 574:	39 07       	cpc	r19, r25
 576:	78 f0       	brcs	.+30     	; 0x596 <malloc+0x120>
 578:	ac 01       	movw	r20, r24
 57a:	4e 5f       	subi	r20, 0xFE	; 254
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	24 17       	cp	r18, r20
 580:	35 07       	cpc	r19, r21
 582:	48 f0       	brcs	.+18     	; 0x596 <malloc+0x120>
 584:	4e 0f       	add	r20, r30
 586:	5f 1f       	adc	r21, r31
 588:	50 93 68 00 	sts	0x0068, r21	; 0x800068 <__brkval+0x1>
 58c:	40 93 67 00 	sts	0x0067, r20	; 0x800067 <__brkval>
 590:	81 93       	st	Z+, r24
 592:	91 93       	st	Z+, r25
 594:	02 c0       	rjmp	.+4      	; 0x59a <malloc+0x124>
 596:	e0 e0       	ldi	r30, 0x00	; 0
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	cf 01       	movw	r24, r30
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <free>:
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	00 97       	sbiw	r24, 0x00	; 0
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <free+0xa>
 5ae:	81 c0       	rjmp	.+258    	; 0x6b2 <free+0x10c>
 5b0:	fc 01       	movw	r30, r24
 5b2:	32 97       	sbiw	r30, 0x02	; 2
 5b4:	13 82       	std	Z+3, r1	; 0x03
 5b6:	12 82       	std	Z+2, r1	; 0x02
 5b8:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <__flp>
 5bc:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <__flp+0x1>
 5c0:	10 97       	sbiw	r26, 0x00	; 0
 5c2:	81 f4       	brne	.+32     	; 0x5e4 <free+0x3e>
 5c4:	20 81       	ld	r18, Z
 5c6:	31 81       	ldd	r19, Z+1	; 0x01
 5c8:	82 0f       	add	r24, r18
 5ca:	93 1f       	adc	r25, r19
 5cc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <__brkval>
 5d0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__brkval+0x1>
 5d4:	28 17       	cp	r18, r24
 5d6:	39 07       	cpc	r19, r25
 5d8:	51 f5       	brne	.+84     	; 0x62e <free+0x88>
 5da:	f0 93 68 00 	sts	0x0068, r31	; 0x800068 <__brkval+0x1>
 5de:	e0 93 67 00 	sts	0x0067, r30	; 0x800067 <__brkval>
 5e2:	67 c0       	rjmp	.+206    	; 0x6b2 <free+0x10c>
 5e4:	ed 01       	movw	r28, r26
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	ce 17       	cp	r28, r30
 5ec:	df 07       	cpc	r29, r31
 5ee:	40 f4       	brcc	.+16     	; 0x600 <free+0x5a>
 5f0:	4a 81       	ldd	r20, Y+2	; 0x02
 5f2:	5b 81       	ldd	r21, Y+3	; 0x03
 5f4:	9e 01       	movw	r18, r28
 5f6:	41 15       	cp	r20, r1
 5f8:	51 05       	cpc	r21, r1
 5fa:	f1 f0       	breq	.+60     	; 0x638 <free+0x92>
 5fc:	ea 01       	movw	r28, r20
 5fe:	f5 cf       	rjmp	.-22     	; 0x5ea <free+0x44>
 600:	d3 83       	std	Z+3, r29	; 0x03
 602:	c2 83       	std	Z+2, r28	; 0x02
 604:	40 81       	ld	r20, Z
 606:	51 81       	ldd	r21, Z+1	; 0x01
 608:	84 0f       	add	r24, r20
 60a:	95 1f       	adc	r25, r21
 60c:	c8 17       	cp	r28, r24
 60e:	d9 07       	cpc	r29, r25
 610:	59 f4       	brne	.+22     	; 0x628 <free+0x82>
 612:	88 81       	ld	r24, Y
 614:	99 81       	ldd	r25, Y+1	; 0x01
 616:	84 0f       	add	r24, r20
 618:	95 1f       	adc	r25, r21
 61a:	02 96       	adiw	r24, 0x02	; 2
 61c:	91 83       	std	Z+1, r25	; 0x01
 61e:	80 83       	st	Z, r24
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	9b 81       	ldd	r25, Y+3	; 0x03
 624:	93 83       	std	Z+3, r25	; 0x03
 626:	82 83       	std	Z+2, r24	; 0x02
 628:	21 15       	cp	r18, r1
 62a:	31 05       	cpc	r19, r1
 62c:	29 f4       	brne	.+10     	; 0x638 <free+0x92>
 62e:	f0 93 6a 00 	sts	0x006A, r31	; 0x80006a <__flp+0x1>
 632:	e0 93 69 00 	sts	0x0069, r30	; 0x800069 <__flp>
 636:	3d c0       	rjmp	.+122    	; 0x6b2 <free+0x10c>
 638:	e9 01       	movw	r28, r18
 63a:	fb 83       	std	Y+3, r31	; 0x03
 63c:	ea 83       	std	Y+2, r30	; 0x02
 63e:	49 91       	ld	r20, Y+
 640:	59 91       	ld	r21, Y+
 642:	c4 0f       	add	r28, r20
 644:	d5 1f       	adc	r29, r21
 646:	ec 17       	cp	r30, r28
 648:	fd 07       	cpc	r31, r29
 64a:	61 f4       	brne	.+24     	; 0x664 <free+0xbe>
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	84 0f       	add	r24, r20
 652:	95 1f       	adc	r25, r21
 654:	02 96       	adiw	r24, 0x02	; 2
 656:	e9 01       	movw	r28, r18
 658:	99 83       	std	Y+1, r25	; 0x01
 65a:	88 83       	st	Y, r24
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	93 81       	ldd	r25, Z+3	; 0x03
 660:	9b 83       	std	Y+3, r25	; 0x03
 662:	8a 83       	std	Y+2, r24	; 0x02
 664:	e0 e0       	ldi	r30, 0x00	; 0
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	12 96       	adiw	r26, 0x02	; 2
 66a:	8d 91       	ld	r24, X+
 66c:	9c 91       	ld	r25, X
 66e:	13 97       	sbiw	r26, 0x03	; 3
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	19 f0       	breq	.+6      	; 0x67a <free+0xd4>
 674:	fd 01       	movw	r30, r26
 676:	dc 01       	movw	r26, r24
 678:	f7 cf       	rjmp	.-18     	; 0x668 <free+0xc2>
 67a:	8d 91       	ld	r24, X+
 67c:	9c 91       	ld	r25, X
 67e:	11 97       	sbiw	r26, 0x01	; 1
 680:	9d 01       	movw	r18, r26
 682:	2e 5f       	subi	r18, 0xFE	; 254
 684:	3f 4f       	sbci	r19, 0xFF	; 255
 686:	82 0f       	add	r24, r18
 688:	93 1f       	adc	r25, r19
 68a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <__brkval>
 68e:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__brkval+0x1>
 692:	28 17       	cp	r18, r24
 694:	39 07       	cpc	r19, r25
 696:	69 f4       	brne	.+26     	; 0x6b2 <free+0x10c>
 698:	30 97       	sbiw	r30, 0x00	; 0
 69a:	29 f4       	brne	.+10     	; 0x6a6 <free+0x100>
 69c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__flp+0x1>
 6a0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp>
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <free+0x104>
 6a6:	13 82       	std	Z+3, r1	; 0x03
 6a8:	12 82       	std	Z+2, r1	; 0x02
 6aa:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <__brkval+0x1>
 6ae:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <__brkval>
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
